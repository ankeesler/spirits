/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

// SpiritStats - Quantitative properties of the Spirit; these are utilized and manipulated throughout the course of a Battle
type SpiritStats struct {

	// A quantitative representation of the energy of the Spirit; when this drops to 0, the Spirit is no longer to participate in a Battle
	Health int64 `json:"health"`

	// A quantitative representation of the might of the Spirit
	Power int64 `json:"power,omitempty"`

	// A quantitative representation of the defense of the Spirit
	Armor int64 `json:"armor,omitempty"`

	// A quantitative representation of the speed of the Spirit
	Agility int64 `json:"agility,omitempty"`
}

// AssertSpiritStatsRequired checks if the required fields are not zero-ed
func AssertSpiritStatsRequired(obj SpiritStats) error {
	elements := map[string]interface{}{
		"health": obj.Health,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertRecurseSpiritStatsRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of SpiritStats (e.g. [][]SpiritStats), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSpiritStatsRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSpiritStats, ok := obj.(SpiritStats)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSpiritStatsRequired(aSpiritStats)
	})
}
