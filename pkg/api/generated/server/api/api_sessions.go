/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionsApiController binds http requests to an api service and writes the service results to the http response
type SessionsApiController struct {
	service      SessionsApiServicer
	errorHandler ErrorHandler
}

// SessionsApiOption for how the controller is set up.
type SessionsApiOption func(*SessionsApiController)

// WithSessionsApiErrorHandler inject ErrorHandler into controller
func WithSessionsApiErrorHandler(h ErrorHandler) SessionsApiOption {
	return func(c *SessionsApiController) {
		c.errorHandler = h
	}
}

// NewSessionsApiController creates a default api controller
func NewSessionsApiController(s SessionsApiServicer, opts ...SessionsApiOption) Router {
	controller := &SessionsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionsApiController
func (c *SessionsApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessions",
			strings.ToUpper("Post"),
			"/sessions",
			c.CreateSessions,
		},
		{
			"DeleteSessions",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}",
			c.DeleteSessions,
		},
		{
			"GetSessions",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}",
			c.GetSessions,
		},
		{
			"ListSessions",
			strings.ToUpper("Get"),
			"/sessions",
			c.ListSessions,
		},
		{
			"UpdateSessions",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}",
			c.UpdateSessions,
		},
	}
}

// CreateSessions -
func (c *SessionsApiController) CreateSessions(w http.ResponseWriter, r *http.Request) {
	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessions(r.Context(), sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessions -
func (c *SessionsApiController) DeleteSessions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.DeleteSessions(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessions -
func (c *SessionsApiController) GetSessions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.GetSessions(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessions -
func (c *SessionsApiController) ListSessions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListSessions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessions -
func (c *SessionsApiController) UpdateSessions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessions(r.Context(), sessionNameParam, sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
