/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionsApiController binds http requests to an api service and writes the service results to the http response
type SessionsApiController struct {
	service      SessionsApiServicer
	errorHandler ErrorHandler
}

// SessionsApiOption for how the controller is set up.
type SessionsApiOption func(*SessionsApiController)

// WithSessionsApiErrorHandler inject ErrorHandler into controller
func WithSessionsApiErrorHandler(h ErrorHandler) SessionsApiOption {
	return func(c *SessionsApiController) {
		c.errorHandler = h
	}
}

// NewSessionsApiController creates a default api controller
func NewSessionsApiController(s SessionsApiServicer, opts ...SessionsApiOption) Router {
	controller := &SessionsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionsApiController
func (c *SessionsApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionBattleSpiritActions",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}/actions",
			c.CreateSessionBattleSpiritActions,
		},
		{
			"CreateSessionBattles",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles",
			c.CreateSessionBattles,
		},
		{
			"CreateSessionTeamSpirits",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.CreateSessionTeamSpirits,
		},
		{
			"CreateSessionTeams",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams",
			c.CreateSessionTeams,
		},
		{
			"CreateSessions",
			strings.ToUpper("Post"),
			"/sessions",
			c.CreateSessions,
		},
		{
			"DeleteSessionBattles",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.DeleteSessionBattles,
		},
		{
			"DeleteSessionTeamSpirits",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.DeleteSessionTeamSpirits,
		},
		{
			"DeleteSessionTeams",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.DeleteSessionTeams,
		},
		{
			"DeleteSessions",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}",
			c.DeleteSessions,
		},
		{
			"GetSessionBattleSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}",
			c.GetSessionBattleSpirits,
		},
		{
			"GetSessionBattles",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.GetSessionBattles,
		},
		{
			"GetSessionTeamSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.GetSessionTeamSpirits,
		},
		{
			"GetSessionTeams",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.GetSessionTeams,
		},
		{
			"GetSessions",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}",
			c.GetSessions,
		},
		{
			"ListSessions",
			strings.ToUpper("Get"),
			"/sessions",
			c.ListSessions,
		},
		{
			"ListSessionsBattles",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles",
			c.ListSessionsBattles,
		},
		{
			"ListSessionsBattlesSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}/spirits",
			c.ListSessionsBattlesSpirits,
		},
		{
			"ListSessionsTeams",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams",
			c.ListSessionsTeams,
		},
		{
			"ListSessionsTeamsSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.ListSessionsTeamsSpirits,
		},
		{
			"UpdateSessionTeamSpirits",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.UpdateSessionTeamSpirits,
		},
		{
			"UpdateSessionTeams",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.UpdateSessionTeams,
		},
		{
			"UpdateSessions",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}",
			c.UpdateSessions,
		},
	}
}

// CreateSessionBattleSpiritActions -
func (c *SessionsApiController) CreateSessionBattleSpiritActions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	spiritNameParam := params["spiritName"]

	actionParam := Action{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActionRequired(actionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionBattleSpiritActions(r.Context(), sessionNameParam, battleNameParam, spiritNameParam, actionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateSessionBattles -
func (c *SessionsApiController) CreateSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleParam := Battle{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&battleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBattleRequired(battleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionBattles(r.Context(), sessionNameParam, battleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateSessionTeamSpirits -
func (c *SessionsApiController) CreateSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateSessionTeams -
func (c *SessionsApiController) CreateSessionTeams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamParam := Team{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionTeams(r.Context(), sessionNameParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateSessions -
func (c *SessionsApiController) CreateSessions(w http.ResponseWriter, r *http.Request) {
	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessions(r.Context(), sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionBattles -
func (c *SessionsApiController) DeleteSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.DeleteSessionBattles(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionTeamSpirits -
func (c *SessionsApiController) DeleteSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.DeleteSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionTeams -
func (c *SessionsApiController) DeleteSessionTeams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.DeleteSessionTeams(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessions -
func (c *SessionsApiController) DeleteSessions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.DeleteSessions(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionBattleSpirits -
func (c *SessionsApiController) GetSessionBattleSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.GetSessionBattleSpirits(r.Context(), sessionNameParam, battleNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionBattles -
func (c *SessionsApiController) GetSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.GetSessionBattles(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionTeamSpirits -
func (c *SessionsApiController) GetSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.GetSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionTeams -
func (c *SessionsApiController) GetSessionTeams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.GetSessionTeams(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessions -
func (c *SessionsApiController) GetSessions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.GetSessions(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessions -
func (c *SessionsApiController) ListSessions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListSessions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionsBattles -
func (c *SessionsApiController) ListSessionsBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.ListSessionsBattles(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionsBattlesSpirits -
func (c *SessionsApiController) ListSessionsBattlesSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.ListSessionsBattlesSpirits(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionsTeams -
func (c *SessionsApiController) ListSessionsTeams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.ListSessionsTeams(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionsTeamsSpirits -
func (c *SessionsApiController) ListSessionsTeamsSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.ListSessionsTeamsSpirits(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessionTeamSpirits -
func (c *SessionsApiController) UpdateSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessionTeams -
func (c *SessionsApiController) UpdateSessionTeams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	teamParam := Team{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessionTeams(r.Context(), sessionNameParam, teamNameParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessions -
func (c *SessionsApiController) UpdateSessions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessions(r.Context(), sessionNameParam, sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
