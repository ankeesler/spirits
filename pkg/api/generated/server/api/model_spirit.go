/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

// Spirit - An actor in a Battle
type Spirit struct {

	// The unique name of this Spirit
	Name string `json:"name"`

	Stats SpiritStats `json:"stats"`

	// The Action's that this Spirit can perform
	Actions []string `json:"actions,omitempty"`

	// The AI setting for this Spirit
	Intelligence string `json:"intelligence,omitempty"`
}

// AssertSpiritRequired checks if the required fields are not zero-ed
func AssertSpiritRequired(obj Spirit) error {
	elements := map[string]interface{}{
		"name":  obj.Name,
		"stats": obj.Stats,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSpiritStatsRequired(obj.Stats); err != nil {
		return err
	}
	return nil
}

// AssertRecurseSpiritRequired recursively checks if required fields are not zero-ed in a nested slice.
// Accepts only nested slice of Spirit (e.g. [][]Spirit), otherwise ErrTypeAssertionError is thrown.
func AssertRecurseSpiritRequired(objSlice interface{}) error {
	return AssertRecurseInterfaceRequired(objSlice, func(obj interface{}) error {
		aSpirit, ok := obj.(Spirit)
		if !ok {
			return ErrTypeAssertionError
		}
		return AssertSpiritRequired(aSpirit)
	})
}
