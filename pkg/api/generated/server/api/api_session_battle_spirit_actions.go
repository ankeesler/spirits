/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionBattleSpiritActionsApiController binds http requests to an api service and writes the service results to the http response
type SessionBattleSpiritActionsApiController struct {
	service      SessionBattleSpiritActionsApiServicer
	errorHandler ErrorHandler
}

// SessionBattleSpiritActionsApiOption for how the controller is set up.
type SessionBattleSpiritActionsApiOption func(*SessionBattleSpiritActionsApiController)

// WithSessionBattleSpiritActionsApiErrorHandler inject ErrorHandler into controller
func WithSessionBattleSpiritActionsApiErrorHandler(h ErrorHandler) SessionBattleSpiritActionsApiOption {
	return func(c *SessionBattleSpiritActionsApiController) {
		c.errorHandler = h
	}
}

// NewSessionBattleSpiritActionsApiController creates a default api controller
func NewSessionBattleSpiritActionsApiController(s SessionBattleSpiritActionsApiServicer, opts ...SessionBattleSpiritActionsApiOption) Router {
	controller := &SessionBattleSpiritActionsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionBattleSpiritActionsApiController
func (c *SessionBattleSpiritActionsApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionBattleSpiritActions",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}/actions",
			c.CreateSessionBattleSpiritActions,
		},
	}
}

// CreateSessionBattleSpiritActions -
func (c *SessionBattleSpiritActionsApiController) CreateSessionBattleSpiritActions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	spiritNameParam := params["spiritName"]

	actionParam := Action{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActionRequired(actionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionBattleSpiritActions(r.Context(), sessionNameParam, battleNameParam, spiritNameParam, actionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
