/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultApiController binds http requests to an api service and writes the service results to the http response
type DefaultApiController struct {
	service DefaultApiServicer
	errorHandler ErrorHandler
}

// DefaultApiOption for how the controller is set up.
type DefaultApiOption func(*DefaultApiController)

// WithDefaultApiErrorHandler inject ErrorHandler into controller
func WithDefaultApiErrorHandler(h ErrorHandler) DefaultApiOption {
	return func(c *DefaultApiController) {
		c.errorHandler = h
	}
}

// NewDefaultApiController creates a default api controller
func NewDefaultApiController(s DefaultApiServicer, opts ...DefaultApiOption) Router {
	controller := &DefaultApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultApiController
func (c *DefaultApiController) Routes() Routes {
	return Routes{ 
		{
			"RootGet",
			strings.ToUpper("Get"),
			"/",
			c.RootGet,
		},
		{
			"SessionsGet",
			strings.ToUpper("Get"),
			"/sessions",
			c.SessionsGet,
		},
		{
			"SessionsPost",
			strings.ToUpper("Post"),
			"/sessions",
			c.SessionsPost,
		},
		{
			"SessionsSessionNameBattlesBattleNameDelete",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.SessionsSessionNameBattlesBattleNameDelete,
		},
		{
			"SessionsSessionNameBattlesBattleNameGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.SessionsSessionNameBattlesBattleNameGet,
		},
		{
			"SessionsSessionNameBattlesBattleNameSpiritsGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}/spirits",
			c.SessionsSessionNameBattlesBattleNameSpiritsGet,
		},
		{
			"SessionsSessionNameBattlesBattleNameSpiritsSpiritNameActionsPost",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}/actions",
			c.SessionsSessionNameBattlesBattleNameSpiritsSpiritNameActionsPost,
		},
		{
			"SessionsSessionNameBattlesBattleNameSpiritsSpiritNameGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}",
			c.SessionsSessionNameBattlesBattleNameSpiritsSpiritNameGet,
		},
		{
			"SessionsSessionNameBattlesGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles",
			c.SessionsSessionNameBattlesGet,
		},
		{
			"SessionsSessionNameBattlesPost",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles",
			c.SessionsSessionNameBattlesPost,
		},
		{
			"SessionsSessionNameDelete",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}",
			c.SessionsSessionNameDelete,
		},
		{
			"SessionsSessionNameGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}",
			c.SessionsSessionNameGet,
		},
		{
			"SessionsSessionNamePut",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}",
			c.SessionsSessionNamePut,
		},
		{
			"SessionsSessionNameTeamsGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams",
			c.SessionsSessionNameTeamsGet,
		},
		{
			"SessionsSessionNameTeamsPost",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams",
			c.SessionsSessionNameTeamsPost,
		},
		{
			"SessionsSessionNameTeamsTeamNameDelete",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.SessionsSessionNameTeamsTeamNameDelete,
		},
		{
			"SessionsSessionNameTeamsTeamNameGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.SessionsSessionNameTeamsTeamNameGet,
		},
		{
			"SessionsSessionNameTeamsTeamNamePut",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.SessionsSessionNameTeamsTeamNamePut,
		},
		{
			"SessionsSessionNameTeamsTeamNameSpiritsGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.SessionsSessionNameTeamsTeamNameSpiritsGet,
		},
		{
			"SessionsSessionNameTeamsTeamNameSpiritsPost",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.SessionsSessionNameTeamsTeamNameSpiritsPost,
		},
		{
			"SessionsSessionNameTeamsTeamNameSpiritsSpiritNameDelete",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.SessionsSessionNameTeamsTeamNameSpiritsSpiritNameDelete,
		},
		{
			"SessionsSessionNameTeamsTeamNameSpiritsSpiritNameGet",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.SessionsSessionNameTeamsTeamNameSpiritsSpiritNameGet,
		},
		{
			"SessionsSessionNameTeamsTeamNameSpiritsSpiritNamePut",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.SessionsSessionNameTeamsTeamNameSpiritsSpiritNamePut,
		},
	}
}

// RootGet - 
func (c *DefaultApiController) RootGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RootGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsGet - 
func (c *DefaultApiController) SessionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SessionsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsPost - 
func (c *DefaultApiController) SessionsPost(w http.ResponseWriter, r *http.Request) {
	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsPost(r.Context(), sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameBattlesBattleNameDelete - 
func (c *DefaultApiController) SessionsSessionNameBattlesBattleNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	battleNameParam := params["battleName"]
	
	result, err := c.service.SessionsSessionNameBattlesBattleNameDelete(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameBattlesBattleNameGet - 
func (c *DefaultApiController) SessionsSessionNameBattlesBattleNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	battleNameParam := params["battleName"]
	
	result, err := c.service.SessionsSessionNameBattlesBattleNameGet(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameBattlesBattleNameSpiritsGet - 
func (c *DefaultApiController) SessionsSessionNameBattlesBattleNameSpiritsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	battleNameParam := params["battleName"]
	
	result, err := c.service.SessionsSessionNameBattlesBattleNameSpiritsGet(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameBattlesBattleNameSpiritsSpiritNameActionsPost - 
func (c *DefaultApiController) SessionsSessionNameBattlesBattleNameSpiritsSpiritNameActionsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	battleNameParam := params["battleName"]
	
	spiritNameParam := params["spiritName"]
	
	actionParam := Action{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActionRequired(actionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsSessionNameBattlesBattleNameSpiritsSpiritNameActionsPost(r.Context(), sessionNameParam, battleNameParam, spiritNameParam, actionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameBattlesBattleNameSpiritsSpiritNameGet - 
func (c *DefaultApiController) SessionsSessionNameBattlesBattleNameSpiritsSpiritNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	battleNameParam := params["battleName"]
	
	spiritNameParam := params["spiritName"]
	
	result, err := c.service.SessionsSessionNameBattlesBattleNameSpiritsSpiritNameGet(r.Context(), sessionNameParam, battleNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameBattlesGet - 
func (c *DefaultApiController) SessionsSessionNameBattlesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	result, err := c.service.SessionsSessionNameBattlesGet(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameBattlesPost - 
func (c *DefaultApiController) SessionsSessionNameBattlesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	battleParam := Battle{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&battleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBattleRequired(battleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsSessionNameBattlesPost(r.Context(), sessionNameParam, battleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameDelete - 
func (c *DefaultApiController) SessionsSessionNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	result, err := c.service.SessionsSessionNameDelete(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameGet - 
func (c *DefaultApiController) SessionsSessionNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	result, err := c.service.SessionsSessionNameGet(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNamePut - 
func (c *DefaultApiController) SessionsSessionNamePut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsSessionNamePut(r.Context(), sessionNameParam, sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsGet - 
func (c *DefaultApiController) SessionsSessionNameTeamsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	result, err := c.service.SessionsSessionNameTeamsGet(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsPost - 
func (c *DefaultApiController) SessionsSessionNameTeamsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamParam := Team{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsSessionNameTeamsPost(r.Context(), sessionNameParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNameDelete - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	result, err := c.service.SessionsSessionNameTeamsTeamNameDelete(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNameGet - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	result, err := c.service.SessionsSessionNameTeamsTeamNameGet(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNamePut - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNamePut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	teamParam := Team{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsSessionNameTeamsTeamNamePut(r.Context(), sessionNameParam, teamNameParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNameSpiritsGet - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNameSpiritsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	result, err := c.service.SessionsSessionNameTeamsTeamNameSpiritsGet(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNameSpiritsPost - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNameSpiritsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsSessionNameTeamsTeamNameSpiritsPost(r.Context(), sessionNameParam, teamNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNameSpiritsSpiritNameDelete - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNameSpiritsSpiritNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	spiritNameParam := params["spiritName"]
	
	result, err := c.service.SessionsSessionNameTeamsTeamNameSpiritsSpiritNameDelete(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNameSpiritsSpiritNameGet - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNameSpiritsSpiritNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	spiritNameParam := params["spiritName"]
	
	result, err := c.service.SessionsSessionNameTeamsTeamNameSpiritsSpiritNameGet(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// SessionsSessionNameTeamsTeamNameSpiritsSpiritNamePut - 
func (c *DefaultApiController) SessionsSessionNameTeamsTeamNameSpiritsSpiritNamePut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]
	
	teamNameParam := params["teamName"]
	
	spiritNameParam := params["spiritName"]
	
	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SessionsSessionNameTeamsTeamNameSpiritsSpiritNamePut(r.Context(), sessionNameParam, teamNameParam, spiritNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
