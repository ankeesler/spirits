/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
	"errors"
	"net/http"
)

// SessionApiService is a service that implements the logic for the SessionApiServicer
// This service should implement the business logic for every endpoint for the SessionApi API.
// Include any external packages or services that will be required by this service.
type SessionApiService struct {
}

// NewSessionApiService creates a default api service
func NewSessionApiService() SessionApiServicer {
	return &SessionApiService{}
}

// CreateSession -
func (s *SessionApiService) CreateSession(ctx context.Context, session Session) (ImplResponse, error) {
	// TODO - update CreateSession with the required logic for this service method.
	// Add api_session_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, Session{}) or use other options such as http.Ok ...
	//return Response(201, Session{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateSession method not implemented")
}

// DeleteSession -
func (s *SessionApiService) DeleteSession(ctx context.Context, sessionName string) (ImplResponse, error) {
	// TODO - update DeleteSession with the required logic for this service method.
	// Add api_session_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Session{}) or use other options such as http.Ok ...
	//return Response(200, Session{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteSession method not implemented")
}

// GetSession -
func (s *SessionApiService) GetSession(ctx context.Context, sessionName string) (ImplResponse, error) {
	// TODO - update GetSession with the required logic for this service method.
	// Add api_session_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Session{}) or use other options such as http.Ok ...
	//return Response(200, Session{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetSession method not implemented")
}

// ListSessions -
func (s *SessionApiService) ListSessions(ctx context.Context) (ImplResponse, error) {
	// TODO - update ListSessions with the required logic for this service method.
	// Add api_session_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Session{}) or use other options such as http.Ok ...
	//return Response(200, Session{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListSessions method not implemented")
}

// UpdateSession -
func (s *SessionApiService) UpdateSession(ctx context.Context, sessionName string, session Session) (ImplResponse, error) {
	// TODO - update UpdateSession with the required logic for this service method.
	// Add api_session_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Session{}) or use other options such as http.Ok ...
	//return Response(200, Session{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateSession method not implemented")
}
