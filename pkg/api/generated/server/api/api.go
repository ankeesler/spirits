/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"net/http"
)

// DefaultApiRouter defines the required methods for binding the api requests to a responses for the DefaultApi
// The DefaultApiRouter implementation should parse necessary information from the http request,
// pass the data to a DefaultApiServicer to perform the required actions, then write the service results to the http response.
type DefaultApiRouter interface {
	RootGet(http.ResponseWriter, *http.Request)
}

// SessionApiRouter defines the required methods for binding the api requests to a responses for the SessionApi
// The SessionApiRouter implementation should parse necessary information from the http request,
// pass the data to a SessionApiServicer to perform the required actions, then write the service results to the http response.
type SessionApiRouter interface {
	CreateSession(http.ResponseWriter, *http.Request)
	DeleteSession(http.ResponseWriter, *http.Request)
	GetSession(http.ResponseWriter, *http.Request)
	ListSessions(http.ResponseWriter, *http.Request)
	UpdateSession(http.ResponseWriter, *http.Request)
}

// SessionBattleApiRouter defines the required methods for binding the api requests to a responses for the SessionBattleApi
// The SessionBattleApiRouter implementation should parse necessary information from the http request,
// pass the data to a SessionBattleApiServicer to perform the required actions, then write the service results to the http response.
type SessionBattleApiRouter interface {
	CreateSessionBattle(http.ResponseWriter, *http.Request)
	DeleteSessionBattle(http.ResponseWriter, *http.Request)
	GetSessionBattle(http.ResponseWriter, *http.Request)
	ListSessionBattles(http.ResponseWriter, *http.Request)
}

// SessionBattleSpiritApiRouter defines the required methods for binding the api requests to a responses for the SessionBattleSpiritApi
// The SessionBattleSpiritApiRouter implementation should parse necessary information from the http request,
// pass the data to a SessionBattleSpiritApiServicer to perform the required actions, then write the service results to the http response.
type SessionBattleSpiritApiRouter interface {
	GetSessionBattleSpirit(http.ResponseWriter, *http.Request)
	ListSessionBattleSpirits(http.ResponseWriter, *http.Request)
}

// SessionBattleSpiritActionApiRouter defines the required methods for binding the api requests to a responses for the SessionBattleSpiritActionApi
// The SessionBattleSpiritActionApiRouter implementation should parse necessary information from the http request,
// pass the data to a SessionBattleSpiritActionApiServicer to perform the required actions, then write the service results to the http response.
type SessionBattleSpiritActionApiRouter interface {
	CreateSessionBattleSpiritAction(http.ResponseWriter, *http.Request)
}

// SessionTeamApiRouter defines the required methods for binding the api requests to a responses for the SessionTeamApi
// The SessionTeamApiRouter implementation should parse necessary information from the http request,
// pass the data to a SessionTeamApiServicer to perform the required actions, then write the service results to the http response.
type SessionTeamApiRouter interface {
	CreateSessionTeam(http.ResponseWriter, *http.Request)
	DeleteSessionTeam(http.ResponseWriter, *http.Request)
	GetSessionTeam(http.ResponseWriter, *http.Request)
	ListSessionTeams(http.ResponseWriter, *http.Request)
	UpdateSessionTeam(http.ResponseWriter, *http.Request)
}

// SessionTeamSpiritApiRouter defines the required methods for binding the api requests to a responses for the SessionTeamSpiritApi
// The SessionTeamSpiritApiRouter implementation should parse necessary information from the http request,
// pass the data to a SessionTeamSpiritApiServicer to perform the required actions, then write the service results to the http response.
type SessionTeamSpiritApiRouter interface {
	CreateSessionTeamSpirit(http.ResponseWriter, *http.Request)
	DeleteSessionTeamSpirit(http.ResponseWriter, *http.Request)
	GetSessionTeamSpirit(http.ResponseWriter, *http.Request)
	ListSessionTeamSpirits(http.ResponseWriter, *http.Request)
	UpdateSessionTeamSpirit(http.ResponseWriter, *http.Request)
}

// DefaultApiServicer defines the api actions for the DefaultApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DefaultApiServicer interface {
	RootGet(context.Context) (ImplResponse, error)
}

// SessionApiServicer defines the api actions for the SessionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionApiServicer interface {
	CreateSession(context.Context, Session) (ImplResponse, error)
	DeleteSession(context.Context, string) (ImplResponse, error)
	GetSession(context.Context, string) (ImplResponse, error)
	ListSessions(context.Context) (ImplResponse, error)
	UpdateSession(context.Context, string, Session) (ImplResponse, error)
}

// SessionBattleApiServicer defines the api actions for the SessionBattleApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionBattleApiServicer interface {
	CreateSessionBattle(context.Context, string, Battle) (ImplResponse, error)
	DeleteSessionBattle(context.Context, string, string) (ImplResponse, error)
	GetSessionBattle(context.Context, string, string) (ImplResponse, error)
	ListSessionBattles(context.Context, string) (ImplResponse, error)
}

// SessionBattleSpiritApiServicer defines the api actions for the SessionBattleSpiritApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionBattleSpiritApiServicer interface {
	GetSessionBattleSpirit(context.Context, string, string, string) (ImplResponse, error)
	ListSessionBattleSpirits(context.Context, string, string) (ImplResponse, error)
}

// SessionBattleSpiritActionApiServicer defines the api actions for the SessionBattleSpiritActionApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionBattleSpiritActionApiServicer interface {
	CreateSessionBattleSpiritAction(context.Context, string, string, string, Action) (ImplResponse, error)
}

// SessionTeamApiServicer defines the api actions for the SessionTeamApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionTeamApiServicer interface {
	CreateSessionTeam(context.Context, string, Team) (ImplResponse, error)
	DeleteSessionTeam(context.Context, string, string) (ImplResponse, error)
	GetSessionTeam(context.Context, string, string) (ImplResponse, error)
	ListSessionTeams(context.Context, string) (ImplResponse, error)
	UpdateSessionTeam(context.Context, string, string, Team) (ImplResponse, error)
}

// SessionTeamSpiritApiServicer defines the api actions for the SessionTeamSpiritApi service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionTeamSpiritApiServicer interface {
	CreateSessionTeamSpirit(context.Context, string, string, Spirit) (ImplResponse, error)
	DeleteSessionTeamSpirit(context.Context, string, string, string) (ImplResponse, error)
	GetSessionTeamSpirit(context.Context, string, string, string) (ImplResponse, error)
	ListSessionTeamSpirits(context.Context, string, string) (ImplResponse, error)
	UpdateSessionTeamSpirit(context.Context, string, string, string, Spirit) (ImplResponse, error)
}
