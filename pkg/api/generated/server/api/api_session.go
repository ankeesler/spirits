/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionApiController binds http requests to an api service and writes the service results to the http response
type SessionApiController struct {
	service      SessionApiServicer
	errorHandler ErrorHandler
}

// SessionApiOption for how the controller is set up.
type SessionApiOption func(*SessionApiController)

// WithSessionApiErrorHandler inject ErrorHandler into controller
func WithSessionApiErrorHandler(h ErrorHandler) SessionApiOption {
	return func(c *SessionApiController) {
		c.errorHandler = h
	}
}

// NewSessionApiController creates a default api controller
func NewSessionApiController(s SessionApiServicer, opts ...SessionApiOption) Router {
	controller := &SessionApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionApiController
func (c *SessionApiController) Routes() Routes {
	return Routes{
		{
			"CreateSession",
			strings.ToUpper("Post"),
			"/sessions",
			c.CreateSession,
		},
		{
			"DeleteSession",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}",
			c.DeleteSession,
		},
		{
			"GetSession",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}",
			c.GetSession,
		},
		{
			"ListSessions",
			strings.ToUpper("Get"),
			"/sessions",
			c.ListSessions,
		},
		{
			"UpdateSession",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}",
			c.UpdateSession,
		},
	}
}

// CreateSession -
func (c *SessionApiController) CreateSession(w http.ResponseWriter, r *http.Request) {
	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSession(r.Context(), sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSession -
func (c *SessionApiController) DeleteSession(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.DeleteSession(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSession -
func (c *SessionApiController) GetSession(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.GetSession(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessions -
func (c *SessionApiController) ListSessions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ListSessions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSession -
func (c *SessionApiController) UpdateSession(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	sessionParam := Session{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sessionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSessionRequired(sessionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSession(r.Context(), sessionNameParam, sessionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
