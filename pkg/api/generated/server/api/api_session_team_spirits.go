/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionTeamSpiritsApiController binds http requests to an api service and writes the service results to the http response
type SessionTeamSpiritsApiController struct {
	service      SessionTeamSpiritsApiServicer
	errorHandler ErrorHandler
}

// SessionTeamSpiritsApiOption for how the controller is set up.
type SessionTeamSpiritsApiOption func(*SessionTeamSpiritsApiController)

// WithSessionTeamSpiritsApiErrorHandler inject ErrorHandler into controller
func WithSessionTeamSpiritsApiErrorHandler(h ErrorHandler) SessionTeamSpiritsApiOption {
	return func(c *SessionTeamSpiritsApiController) {
		c.errorHandler = h
	}
}

// NewSessionTeamSpiritsApiController creates a default api controller
func NewSessionTeamSpiritsApiController(s SessionTeamSpiritsApiServicer, opts ...SessionTeamSpiritsApiOption) Router {
	controller := &SessionTeamSpiritsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionTeamSpiritsApiController
func (c *SessionTeamSpiritsApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionTeamSpirits",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.CreateSessionTeamSpirits,
		},
		{
			"DeleteSessionTeamSpirits",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.DeleteSessionTeamSpirits,
		},
		{
			"GetSessionTeamSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.GetSessionTeamSpirits,
		},
		{
			"ListSessionTeamSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.ListSessionTeamSpirits,
		},
		{
			"UpdateSessionTeamSpirits",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.UpdateSessionTeamSpirits,
		},
	}
}

// CreateSessionTeamSpirits -
func (c *SessionTeamSpiritsApiController) CreateSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionTeamSpirits -
func (c *SessionTeamSpiritsApiController) DeleteSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.DeleteSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionTeamSpirits -
func (c *SessionTeamSpiritsApiController) GetSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.GetSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionTeamSpirits -
func (c *SessionTeamSpiritsApiController) ListSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.ListSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessionTeamSpirits -
func (c *SessionTeamSpiritsApiController) UpdateSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
