/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionBattleSpiritActionApiController binds http requests to an api service and writes the service results to the http response
type SessionBattleSpiritActionApiController struct {
	service      SessionBattleSpiritActionApiServicer
	errorHandler ErrorHandler
}

// SessionBattleSpiritActionApiOption for how the controller is set up.
type SessionBattleSpiritActionApiOption func(*SessionBattleSpiritActionApiController)

// WithSessionBattleSpiritActionApiErrorHandler inject ErrorHandler into controller
func WithSessionBattleSpiritActionApiErrorHandler(h ErrorHandler) SessionBattleSpiritActionApiOption {
	return func(c *SessionBattleSpiritActionApiController) {
		c.errorHandler = h
	}
}

// NewSessionBattleSpiritActionApiController creates a default api controller
func NewSessionBattleSpiritActionApiController(s SessionBattleSpiritActionApiServicer, opts ...SessionBattleSpiritActionApiOption) Router {
	controller := &SessionBattleSpiritActionApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionBattleSpiritActionApiController
func (c *SessionBattleSpiritActionApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionBattleSpiritAction",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}/actions",
			c.CreateSessionBattleSpiritAction,
		},
	}
}

// CreateSessionBattleSpiritAction -
func (c *SessionBattleSpiritActionApiController) CreateSessionBattleSpiritAction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	spiritNameParam := params["spiritName"]

	actionParam := Action{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActionRequired(actionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionBattleSpiritAction(r.Context(), sessionNameParam, battleNameParam, spiritNameParam, actionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
