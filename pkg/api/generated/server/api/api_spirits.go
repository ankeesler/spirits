/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SpiritsApiController binds http requests to an api service and writes the service results to the http response
type SpiritsApiController struct {
	service      SpiritsApiServicer
	errorHandler ErrorHandler
}

// SpiritsApiOption for how the controller is set up.
type SpiritsApiOption func(*SpiritsApiController)

// WithSpiritsApiErrorHandler inject ErrorHandler into controller
func WithSpiritsApiErrorHandler(h ErrorHandler) SpiritsApiOption {
	return func(c *SpiritsApiController) {
		c.errorHandler = h
	}
}

// NewSpiritsApiController creates a default api controller
func NewSpiritsApiController(s SpiritsApiServicer, opts ...SpiritsApiOption) Router {
	controller := &SpiritsApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SpiritsApiController
func (c *SpiritsApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionBattleSpiritActions",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}/actions",
			c.CreateSessionBattleSpiritActions,
		},
		{
			"CreateSessionTeamSpirits",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.CreateSessionTeamSpirits,
		},
		{
			"DeleteSessionTeamSpirits",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.DeleteSessionTeamSpirits,
		},
		{
			"GetSessionBattleSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}",
			c.GetSessionBattleSpirits,
		},
		{
			"GetSessionTeamSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.GetSessionTeamSpirits,
		},
		{
			"ListSessionsBattlesSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}/spirits",
			c.ListSessionsBattlesSpirits,
		},
		{
			"ListSessionsTeamsSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.ListSessionsTeamsSpirits,
		},
		{
			"UpdateSessionTeamSpirits",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.UpdateSessionTeamSpirits,
		},
	}
}

// CreateSessionBattleSpiritActions -
func (c *SpiritsApiController) CreateSessionBattleSpiritActions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	spiritNameParam := params["spiritName"]

	actionParam := Action{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActionRequired(actionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionBattleSpiritActions(r.Context(), sessionNameParam, battleNameParam, spiritNameParam, actionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// CreateSessionTeamSpirits -
func (c *SpiritsApiController) CreateSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionTeamSpirits -
func (c *SpiritsApiController) DeleteSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.DeleteSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionBattleSpirits -
func (c *SpiritsApiController) GetSessionBattleSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.GetSessionBattleSpirits(r.Context(), sessionNameParam, battleNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionTeamSpirits -
func (c *SpiritsApiController) GetSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.GetSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionsBattlesSpirits -
func (c *SpiritsApiController) ListSessionsBattlesSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.ListSessionsBattlesSpirits(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionsTeamsSpirits -
func (c *SpiritsApiController) ListSessionsTeamsSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.ListSessionsTeamsSpirits(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessionTeamSpirits -
func (c *SpiritsApiController) UpdateSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam, spiritNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
