/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionBattleApiController binds http requests to an api service and writes the service results to the http response
type SessionBattleApiController struct {
	service      SessionBattleApiServicer
	errorHandler ErrorHandler
}

// SessionBattleApiOption for how the controller is set up.
type SessionBattleApiOption func(*SessionBattleApiController)

// WithSessionBattleApiErrorHandler inject ErrorHandler into controller
func WithSessionBattleApiErrorHandler(h ErrorHandler) SessionBattleApiOption {
	return func(c *SessionBattleApiController) {
		c.errorHandler = h
	}
}

// NewSessionBattleApiController creates a default api controller
func NewSessionBattleApiController(s SessionBattleApiServicer, opts ...SessionBattleApiOption) Router {
	controller := &SessionBattleApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionBattleApiController
func (c *SessionBattleApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionBattle",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles",
			c.CreateSessionBattle,
		},
		{
			"DeleteSessionBattle",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.DeleteSessionBattle,
		},
		{
			"GetSessionBattle",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.GetSessionBattle,
		},
		{
			"ListSessionBattles",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles",
			c.ListSessionBattles,
		},
	}
}

// CreateSessionBattle -
func (c *SessionBattleApiController) CreateSessionBattle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleParam := Battle{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&battleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBattleRequired(battleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionBattle(r.Context(), sessionNameParam, battleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionBattle -
func (c *SessionBattleApiController) DeleteSessionBattle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.DeleteSessionBattle(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionBattle -
func (c *SessionBattleApiController) GetSessionBattle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.GetSessionBattle(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionBattles -
func (c *SessionBattleApiController) ListSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.ListSessionBattles(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
