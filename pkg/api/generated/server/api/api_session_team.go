/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionTeamApiController binds http requests to an api service and writes the service results to the http response
type SessionTeamApiController struct {
	service      SessionTeamApiServicer
	errorHandler ErrorHandler
}

// SessionTeamApiOption for how the controller is set up.
type SessionTeamApiOption func(*SessionTeamApiController)

// WithSessionTeamApiErrorHandler inject ErrorHandler into controller
func WithSessionTeamApiErrorHandler(h ErrorHandler) SessionTeamApiOption {
	return func(c *SessionTeamApiController) {
		c.errorHandler = h
	}
}

// NewSessionTeamApiController creates a default api controller
func NewSessionTeamApiController(s SessionTeamApiServicer, opts ...SessionTeamApiOption) Router {
	controller := &SessionTeamApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionTeamApiController
func (c *SessionTeamApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionTeam",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams",
			c.CreateSessionTeam,
		},
		{
			"DeleteSessionTeam",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.DeleteSessionTeam,
		},
		{
			"GetSessionTeam",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.GetSessionTeam,
		},
		{
			"ListSessionTeams",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams",
			c.ListSessionTeams,
		},
		{
			"UpdateSessionTeam",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}",
			c.UpdateSessionTeam,
		},
	}
}

// CreateSessionTeam -
func (c *SessionTeamApiController) CreateSessionTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamParam := Team{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionTeam(r.Context(), sessionNameParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionTeam -
func (c *SessionTeamApiController) DeleteSessionTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.DeleteSessionTeam(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionTeam -
func (c *SessionTeamApiController) GetSessionTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.GetSessionTeam(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionTeams -
func (c *SessionTeamApiController) ListSessionTeams(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.ListSessionTeams(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessionTeam -
func (c *SessionTeamApiController) UpdateSessionTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	teamParam := Team{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&teamParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTeamRequired(teamParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessionTeam(r.Context(), sessionNameParam, teamNameParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
