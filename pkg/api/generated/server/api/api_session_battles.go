/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionBattlesApiController binds http requests to an api service and writes the service results to the http response
type SessionBattlesApiController struct {
	service      SessionBattlesApiServicer
	errorHandler ErrorHandler
}

// SessionBattlesApiOption for how the controller is set up.
type SessionBattlesApiOption func(*SessionBattlesApiController)

// WithSessionBattlesApiErrorHandler inject ErrorHandler into controller
func WithSessionBattlesApiErrorHandler(h ErrorHandler) SessionBattlesApiOption {
	return func(c *SessionBattlesApiController) {
		c.errorHandler = h
	}
}

// NewSessionBattlesApiController creates a default api controller
func NewSessionBattlesApiController(s SessionBattlesApiServicer, opts ...SessionBattlesApiOption) Router {
	controller := &SessionBattlesApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionBattlesApiController
func (c *SessionBattlesApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionBattles",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/battles",
			c.CreateSessionBattles,
		},
		{
			"DeleteSessionBattles",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.DeleteSessionBattles,
		},
		{
			"GetSessionBattles",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles/{battleName}",
			c.GetSessionBattles,
		},
		{
			"ListSessionBattles",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/battles",
			c.ListSessionBattles,
		},
	}
}

// CreateSessionBattles -
func (c *SessionBattlesApiController) CreateSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleParam := Battle{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&battleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBattleRequired(battleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionBattles(r.Context(), sessionNameParam, battleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionBattles -
func (c *SessionBattlesApiController) DeleteSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.DeleteSessionBattles(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionBattles -
func (c *SessionBattlesApiController) GetSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	battleNameParam := params["battleName"]

	result, err := c.service.GetSessionBattles(r.Context(), sessionNameParam, battleNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionBattles -
func (c *SessionBattlesApiController) ListSessionBattles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	result, err := c.service.ListSessionBattles(r.Context(), sessionNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
