/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
	"errors"
	"net/http"
)

// SessionTeamSpiritsApiService is a service that implements the logic for the SessionTeamSpiritsApiServicer
// This service should implement the business logic for every endpoint for the SessionTeamSpiritsApi API.
// Include any external packages or services that will be required by this service.
type SessionTeamSpiritsApiService struct {
}

// NewSessionTeamSpiritsApiService creates a default api service
func NewSessionTeamSpiritsApiService() SessionTeamSpiritsApiServicer {
	return &SessionTeamSpiritsApiService{}
}

// CreateSessionTeamSpirits -
func (s *SessionTeamSpiritsApiService) CreateSessionTeamSpirits(ctx context.Context, sessionName string, teamName string, spirit Spirit) (ImplResponse, error) {
	// TODO - update CreateSessionTeamSpirits with the required logic for this service method.
	// Add api_session_team_spirits_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, Spirit{}) or use other options such as http.Ok ...
	//return Response(201, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateSessionTeamSpirits method not implemented")
}

// DeleteSessionTeamSpirits -
func (s *SessionTeamSpiritsApiService) DeleteSessionTeamSpirits(ctx context.Context, sessionName string, teamName string, spiritName string) (ImplResponse, error) {
	// TODO - update DeleteSessionTeamSpirits with the required logic for this service method.
	// Add api_session_team_spirits_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteSessionTeamSpirits method not implemented")
}

// GetSessionTeamSpirits -
func (s *SessionTeamSpiritsApiService) GetSessionTeamSpirits(ctx context.Context, sessionName string, teamName string, spiritName string) (ImplResponse, error) {
	// TODO - update GetSessionTeamSpirits with the required logic for this service method.
	// Add api_session_team_spirits_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetSessionTeamSpirits method not implemented")
}

// ListSessionTeamSpirits -
func (s *SessionTeamSpiritsApiService) ListSessionTeamSpirits(ctx context.Context, sessionName string, teamName string) (ImplResponse, error) {
	// TODO - update ListSessionTeamSpirits with the required logic for this service method.
	// Add api_session_team_spirits_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListSessionTeamSpirits method not implemented")
}

// UpdateSessionTeamSpirits -
func (s *SessionTeamSpiritsApiService) UpdateSessionTeamSpirits(ctx context.Context, sessionName string, teamName string, spiritName string, spirit Spirit) (ImplResponse, error) {
	// TODO - update UpdateSessionTeamSpirits with the required logic for this service method.
	// Add api_session_team_spirits_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateSessionTeamSpirits method not implemented")
}
