/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SessionTeamSpiritApiController binds http requests to an api service and writes the service results to the http response
type SessionTeamSpiritApiController struct {
	service      SessionTeamSpiritApiServicer
	errorHandler ErrorHandler
}

// SessionTeamSpiritApiOption for how the controller is set up.
type SessionTeamSpiritApiOption func(*SessionTeamSpiritApiController)

// WithSessionTeamSpiritApiErrorHandler inject ErrorHandler into controller
func WithSessionTeamSpiritApiErrorHandler(h ErrorHandler) SessionTeamSpiritApiOption {
	return func(c *SessionTeamSpiritApiController) {
		c.errorHandler = h
	}
}

// NewSessionTeamSpiritApiController creates a default api controller
func NewSessionTeamSpiritApiController(s SessionTeamSpiritApiServicer, opts ...SessionTeamSpiritApiOption) Router {
	controller := &SessionTeamSpiritApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionTeamSpiritApiController
func (c *SessionTeamSpiritApiController) Routes() Routes {
	return Routes{
		{
			"CreateSessionTeamSpirit",
			strings.ToUpper("Post"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.CreateSessionTeamSpirit,
		},
		{
			"DeleteSessionTeamSpirit",
			strings.ToUpper("Delete"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.DeleteSessionTeamSpirit,
		},
		{
			"GetSessionTeamSpirit",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.GetSessionTeamSpirit,
		},
		{
			"ListSessionTeamSpirits",
			strings.ToUpper("Get"),
			"/sessions/{sessionName}/teams/{teamName}/spirits",
			c.ListSessionTeamSpirits,
		},
		{
			"UpdateSessionTeamSpirit",
			strings.ToUpper("Put"),
			"/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}",
			c.UpdateSessionTeamSpirit,
		},
	}
}

// CreateSessionTeamSpirit -
func (c *SessionTeamSpiritApiController) CreateSessionTeamSpirit(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSessionTeamSpirit(r.Context(), sessionNameParam, teamNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteSessionTeamSpirit -
func (c *SessionTeamSpiritApiController) DeleteSessionTeamSpirit(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.DeleteSessionTeamSpirit(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetSessionTeamSpirit -
func (c *SessionTeamSpiritApiController) GetSessionTeamSpirit(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	result, err := c.service.GetSessionTeamSpirit(r.Context(), sessionNameParam, teamNameParam, spiritNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ListSessionTeamSpirits -
func (c *SessionTeamSpiritApiController) ListSessionTeamSpirits(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	result, err := c.service.ListSessionTeamSpirits(r.Context(), sessionNameParam, teamNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateSessionTeamSpirit -
func (c *SessionTeamSpiritApiController) UpdateSessionTeamSpirit(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionNameParam := params["sessionName"]

	teamNameParam := params["teamName"]

	spiritNameParam := params["spiritName"]

	spiritParam := Spirit{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&spiritParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSpiritRequired(spiritParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSessionTeamSpirit(r.Context(), sessionNameParam, teamNameParam, spiritNameParam, spiritParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
