/*
 * spirits
 *
 * spirits is a turn-based battle royale game
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package server

import (
	"context"
	"errors"
	"net/http"
)

// SessionTeamSpiritApiService is a service that implements the logic for the SessionTeamSpiritApiServicer
// This service should implement the business logic for every endpoint for the SessionTeamSpiritApi API.
// Include any external packages or services that will be required by this service.
type SessionTeamSpiritApiService struct {
}

// NewSessionTeamSpiritApiService creates a default api service
func NewSessionTeamSpiritApiService() SessionTeamSpiritApiServicer {
	return &SessionTeamSpiritApiService{}
}

// CreateSessionTeamSpirit -
func (s *SessionTeamSpiritApiService) CreateSessionTeamSpirit(ctx context.Context, sessionName string, teamName string, spirit Spirit) (ImplResponse, error) {
	// TODO - update CreateSessionTeamSpirit with the required logic for this service method.
	// Add api_session_team_spirit_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(201, Spirit{}) or use other options such as http.Ok ...
	//return Response(201, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateSessionTeamSpirit method not implemented")
}

// DeleteSessionTeamSpirit -
func (s *SessionTeamSpiritApiService) DeleteSessionTeamSpirit(ctx context.Context, sessionName string, teamName string, spiritName string) (ImplResponse, error) {
	// TODO - update DeleteSessionTeamSpirit with the required logic for this service method.
	// Add api_session_team_spirit_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteSessionTeamSpirit method not implemented")
}

// GetSessionTeamSpirit -
func (s *SessionTeamSpiritApiService) GetSessionTeamSpirit(ctx context.Context, sessionName string, teamName string, spiritName string) (ImplResponse, error) {
	// TODO - update GetSessionTeamSpirit with the required logic for this service method.
	// Add api_session_team_spirit_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetSessionTeamSpirit method not implemented")
}

// ListSessionTeamSpirits -
func (s *SessionTeamSpiritApiService) ListSessionTeamSpirits(ctx context.Context, sessionName string, teamName string) (ImplResponse, error) {
	// TODO - update ListSessionTeamSpirits with the required logic for this service method.
	// Add api_session_team_spirit_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("ListSessionTeamSpirits method not implemented")
}

// UpdateSessionTeamSpirit -
func (s *SessionTeamSpiritApiService) UpdateSessionTeamSpirit(ctx context.Context, sessionName string, teamName string, spiritName string, spirit Spirit) (ImplResponse, error) {
	// TODO - update UpdateSessionTeamSpirit with the required logic for this service method.
	// Add api_session_team_spirit_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, Spirit{}) or use other options such as http.Ok ...
	//return Response(200, Spirit{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateSessionTeamSpirit method not implemented")
}
