/*
spirits

spirits is a turn-based battle royale game

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SpiritStats Quantitative properties of the Spirit; these are utilized and manipulated throughout the course of a Battle
type SpiritStats struct {
	// A quantitative representation of the energy of the Spirit; when this drops to 0, the Spirit is no longer to participate in a Battle
	Health int64 `json:"health"`
	// A quantitative representation of the might of the Spirit
	Power *int64 `json:"power,omitempty"`
	// A quantitative representation of the defense of the Spirit
	Armor *int64 `json:"armor,omitempty"`
	// A quantitative representation of the speed of the Spirit
	Agility *int64 `json:"agility,omitempty"`
}

// NewSpiritStats instantiates a new SpiritStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpiritStats(health int64) *SpiritStats {
	this := SpiritStats{}
	this.Health = health
	var power int64 = 0
	this.Power = &power
	var armor int64 = 0
	this.Armor = &armor
	var agility int64 = 0
	this.Agility = &agility
	return &this
}

// NewSpiritStatsWithDefaults instantiates a new SpiritStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpiritStatsWithDefaults() *SpiritStats {
	this := SpiritStats{}
	var power int64 = 0
	this.Power = &power
	var armor int64 = 0
	this.Armor = &armor
	var agility int64 = 0
	this.Agility = &agility
	return &this
}

// GetHealth returns the Health field value
func (o *SpiritStats) GetHealth() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.Health
}

// GetHealthOk returns a tuple with the Health field value
// and a boolean to check if the value has been set.
func (o *SpiritStats) GetHealthOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Health, true
}

// SetHealth sets field value
func (o *SpiritStats) SetHealth(v int64) {
	o.Health = v
}

// GetPower returns the Power field value if set, zero value otherwise.
func (o *SpiritStats) GetPower() int64 {
	if o == nil || o.Power == nil {
		var ret int64
		return ret
	}
	return *o.Power
}

// GetPowerOk returns a tuple with the Power field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpiritStats) GetPowerOk() (*int64, bool) {
	if o == nil || o.Power == nil {
		return nil, false
	}
	return o.Power, true
}

// HasPower returns a boolean if a field has been set.
func (o *SpiritStats) HasPower() bool {
	if o != nil && o.Power != nil {
		return true
	}

	return false
}

// SetPower gets a reference to the given int64 and assigns it to the Power field.
func (o *SpiritStats) SetPower(v int64) {
	o.Power = &v
}

// GetArmor returns the Armor field value if set, zero value otherwise.
func (o *SpiritStats) GetArmor() int64 {
	if o == nil || o.Armor == nil {
		var ret int64
		return ret
	}
	return *o.Armor
}

// GetArmorOk returns a tuple with the Armor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpiritStats) GetArmorOk() (*int64, bool) {
	if o == nil || o.Armor == nil {
		return nil, false
	}
	return o.Armor, true
}

// HasArmor returns a boolean if a field has been set.
func (o *SpiritStats) HasArmor() bool {
	if o != nil && o.Armor != nil {
		return true
	}

	return false
}

// SetArmor gets a reference to the given int64 and assigns it to the Armor field.
func (o *SpiritStats) SetArmor(v int64) {
	o.Armor = &v
}

// GetAgility returns the Agility field value if set, zero value otherwise.
func (o *SpiritStats) GetAgility() int64 {
	if o == nil || o.Agility == nil {
		var ret int64
		return ret
	}
	return *o.Agility
}

// GetAgilityOk returns a tuple with the Agility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SpiritStats) GetAgilityOk() (*int64, bool) {
	if o == nil || o.Agility == nil {
		return nil, false
	}
	return o.Agility, true
}

// HasAgility returns a boolean if a field has been set.
func (o *SpiritStats) HasAgility() bool {
	if o != nil && o.Agility != nil {
		return true
	}

	return false
}

// SetAgility gets a reference to the given int64 and assigns it to the Agility field.
func (o *SpiritStats) SetAgility(v int64) {
	o.Agility = &v
}

func (o SpiritStats) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["health"] = o.Health
	}
	if o.Power != nil {
		toSerialize["power"] = o.Power
	}
	if o.Armor != nil {
		toSerialize["armor"] = o.Armor
	}
	if o.Agility != nil {
		toSerialize["agility"] = o.Agility
	}
	return json.Marshal(toSerialize)
}

type NullableSpiritStats struct {
	value *SpiritStats
	isSet bool
}

func (v NullableSpiritStats) Get() *SpiritStats {
	return v.value
}

func (v *NullableSpiritStats) Set(val *SpiritStats) {
	v.value = val
	v.isSet = true
}

func (v NullableSpiritStats) IsSet() bool {
	return v.isSet
}

func (v *NullableSpiritStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpiritStats(val *SpiritStats) *NullableSpiritStats {
	return &NullableSpiritStats{value: val, isSet: true}
}

func (v NullableSpiritStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpiritStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


