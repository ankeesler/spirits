/*
spirits

spirits is a turn-based battle royale game

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SessionBattleSpiritApiService SessionBattleSpiritApi service
type SessionBattleSpiritApiService service

type ApiGetSessionBattleSpiritRequest struct {
	ctx context.Context
	ApiService *SessionBattleSpiritApiService
	sessionName string
	battleName string
	spiritName string
}

func (r ApiGetSessionBattleSpiritRequest) Execute() (*Spirit, *http.Response, error) {
	return r.ApiService.GetSessionBattleSpiritExecute(r)
}

/*
GetSessionBattleSpirit Method for GetSessionBattleSpirit

Get Spirit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sessionName Spirit name
 @param battleName Spirit name
 @param spiritName Spirit name
 @return ApiGetSessionBattleSpiritRequest
*/
func (a *SessionBattleSpiritApiService) GetSessionBattleSpirit(ctx context.Context, sessionName string, battleName string, spiritName string) ApiGetSessionBattleSpiritRequest {
	return ApiGetSessionBattleSpiritRequest{
		ApiService: a,
		ctx: ctx,
		sessionName: sessionName,
		battleName: battleName,
		spiritName: spiritName,
	}
}

// Execute executes the request
//  @return Spirit
func (a *SessionBattleSpiritApiService) GetSessionBattleSpiritExecute(r ApiGetSessionBattleSpiritRequest) (*Spirit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Spirit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SessionBattleSpiritApiService.GetSessionBattleSpirit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sessions/{sessionName}/battles/{battleName}/spirits/{spiritName}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionName"+"}", url.PathEscape(parameterToString(r.sessionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"battleName"+"}", url.PathEscape(parameterToString(r.battleName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"spiritName"+"}", url.PathEscape(parameterToString(r.spiritName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sessionName) < 1 {
		return localVarReturnValue, nil, reportError("sessionName must have at least 1 elements")
	}
	if strlen(r.battleName) < 1 {
		return localVarReturnValue, nil, reportError("battleName must have at least 1 elements")
	}
	if strlen(r.spiritName) < 1 {
		return localVarReturnValue, nil, reportError("spiritName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSessionBattleSpiritsRequest struct {
	ctx context.Context
	ApiService *SessionBattleSpiritApiService
	sessionName string
	battleName string
}

func (r ApiListSessionBattleSpiritsRequest) Execute() (*Spirit, *http.Response, error) {
	return r.ApiService.ListSessionBattleSpiritsExecute(r)
}

/*
ListSessionBattleSpirits Method for ListSessionBattleSpirits

List Spirits

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sessionName Spirit name
 @param battleName Spirit name
 @return ApiListSessionBattleSpiritsRequest
*/
func (a *SessionBattleSpiritApiService) ListSessionBattleSpirits(ctx context.Context, sessionName string, battleName string) ApiListSessionBattleSpiritsRequest {
	return ApiListSessionBattleSpiritsRequest{
		ApiService: a,
		ctx: ctx,
		sessionName: sessionName,
		battleName: battleName,
	}
}

// Execute executes the request
//  @return Spirit
func (a *SessionBattleSpiritApiService) ListSessionBattleSpiritsExecute(r ApiListSessionBattleSpiritsRequest) (*Spirit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Spirit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SessionBattleSpiritApiService.ListSessionBattleSpirits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sessions/{sessionName}/battles/{battleName}/spirits"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionName"+"}", url.PathEscape(parameterToString(r.sessionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"battleName"+"}", url.PathEscape(parameterToString(r.battleName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sessionName) < 1 {
		return localVarReturnValue, nil, reportError("sessionName must have at least 1 elements")
	}
	if strlen(r.battleName) < 1 {
		return localVarReturnValue, nil, reportError("battleName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
