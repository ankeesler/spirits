/*
spirits

spirits is a turn-based battle royale game

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)


// SessionTeamSpiritApiService SessionTeamSpiritApi service
type SessionTeamSpiritApiService service

type ApiCreateSessionTeamSpiritRequest struct {
	ctx context.Context
	ApiService *SessionTeamSpiritApiService
	sessionName string
	teamName string
	spirit *Spirit
}

// Spirit to create
func (r ApiCreateSessionTeamSpiritRequest) Spirit(spirit Spirit) ApiCreateSessionTeamSpiritRequest {
	r.spirit = &spirit
	return r
}

func (r ApiCreateSessionTeamSpiritRequest) Execute() (*Spirit, *http.Response, error) {
	return r.ApiService.CreateSessionTeamSpiritExecute(r)
}

/*
CreateSessionTeamSpirit Method for CreateSessionTeamSpirit

Create a Spirit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sessionName Spirit name
 @param teamName Spirit name
 @return ApiCreateSessionTeamSpiritRequest
*/
func (a *SessionTeamSpiritApiService) CreateSessionTeamSpirit(ctx context.Context, sessionName string, teamName string) ApiCreateSessionTeamSpiritRequest {
	return ApiCreateSessionTeamSpiritRequest{
		ApiService: a,
		ctx: ctx,
		sessionName: sessionName,
		teamName: teamName,
	}
}

// Execute executes the request
//  @return Spirit
func (a *SessionTeamSpiritApiService) CreateSessionTeamSpiritExecute(r ApiCreateSessionTeamSpiritRequest) (*Spirit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPost
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Spirit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SessionTeamSpiritApiService.CreateSessionTeamSpirit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sessions/{sessionName}/teams/{teamName}/spirits"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionName"+"}", url.PathEscape(parameterToString(r.sessionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamName"+"}", url.PathEscape(parameterToString(r.teamName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sessionName) < 1 {
		return localVarReturnValue, nil, reportError("sessionName must have at least 1 elements")
	}
	if strlen(r.teamName) < 1 {
		return localVarReturnValue, nil, reportError("teamName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spirit
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiDeleteSessionTeamSpiritRequest struct {
	ctx context.Context
	ApiService *SessionTeamSpiritApiService
	sessionName string
	teamName string
	spiritName string
}

func (r ApiDeleteSessionTeamSpiritRequest) Execute() (*Spirit, *http.Response, error) {
	return r.ApiService.DeleteSessionTeamSpiritExecute(r)
}

/*
DeleteSessionTeamSpirit Method for DeleteSessionTeamSpirit

Watch Spirit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sessionName Spirit name
 @param teamName Spirit name
 @param spiritName Spirit name
 @return ApiDeleteSessionTeamSpiritRequest
*/
func (a *SessionTeamSpiritApiService) DeleteSessionTeamSpirit(ctx context.Context, sessionName string, teamName string, spiritName string) ApiDeleteSessionTeamSpiritRequest {
	return ApiDeleteSessionTeamSpiritRequest{
		ApiService: a,
		ctx: ctx,
		sessionName: sessionName,
		teamName: teamName,
		spiritName: spiritName,
	}
}

// Execute executes the request
//  @return Spirit
func (a *SessionTeamSpiritApiService) DeleteSessionTeamSpiritExecute(r ApiDeleteSessionTeamSpiritRequest) (*Spirit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodDelete
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Spirit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SessionTeamSpiritApiService.DeleteSessionTeamSpirit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionName"+"}", url.PathEscape(parameterToString(r.sessionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamName"+"}", url.PathEscape(parameterToString(r.teamName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"spiritName"+"}", url.PathEscape(parameterToString(r.spiritName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sessionName) < 1 {
		return localVarReturnValue, nil, reportError("sessionName must have at least 1 elements")
	}
	if strlen(r.teamName) < 1 {
		return localVarReturnValue, nil, reportError("teamName must have at least 1 elements")
	}
	if strlen(r.spiritName) < 1 {
		return localVarReturnValue, nil, reportError("spiritName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetSessionTeamSpiritRequest struct {
	ctx context.Context
	ApiService *SessionTeamSpiritApiService
	sessionName string
	teamName string
	spiritName string
}

func (r ApiGetSessionTeamSpiritRequest) Execute() (*Spirit, *http.Response, error) {
	return r.ApiService.GetSessionTeamSpiritExecute(r)
}

/*
GetSessionTeamSpirit Method for GetSessionTeamSpirit

Get Spirit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sessionName Spirit name
 @param teamName Spirit name
 @param spiritName Spirit name
 @return ApiGetSessionTeamSpiritRequest
*/
func (a *SessionTeamSpiritApiService) GetSessionTeamSpirit(ctx context.Context, sessionName string, teamName string, spiritName string) ApiGetSessionTeamSpiritRequest {
	return ApiGetSessionTeamSpiritRequest{
		ApiService: a,
		ctx: ctx,
		sessionName: sessionName,
		teamName: teamName,
		spiritName: spiritName,
	}
}

// Execute executes the request
//  @return Spirit
func (a *SessionTeamSpiritApiService) GetSessionTeamSpiritExecute(r ApiGetSessionTeamSpiritRequest) (*Spirit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Spirit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SessionTeamSpiritApiService.GetSessionTeamSpirit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionName"+"}", url.PathEscape(parameterToString(r.sessionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamName"+"}", url.PathEscape(parameterToString(r.teamName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"spiritName"+"}", url.PathEscape(parameterToString(r.spiritName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sessionName) < 1 {
		return localVarReturnValue, nil, reportError("sessionName must have at least 1 elements")
	}
	if strlen(r.teamName) < 1 {
		return localVarReturnValue, nil, reportError("teamName must have at least 1 elements")
	}
	if strlen(r.spiritName) < 1 {
		return localVarReturnValue, nil, reportError("spiritName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiListSessionTeamSpiritsRequest struct {
	ctx context.Context
	ApiService *SessionTeamSpiritApiService
	sessionName string
	teamName string
}

func (r ApiListSessionTeamSpiritsRequest) Execute() (*Spirit, *http.Response, error) {
	return r.ApiService.ListSessionTeamSpiritsExecute(r)
}

/*
ListSessionTeamSpirits Method for ListSessionTeamSpirits

List Spirits

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sessionName Spirit name
 @param teamName Spirit name
 @return ApiListSessionTeamSpiritsRequest
*/
func (a *SessionTeamSpiritApiService) ListSessionTeamSpirits(ctx context.Context, sessionName string, teamName string) ApiListSessionTeamSpiritsRequest {
	return ApiListSessionTeamSpiritsRequest{
		ApiService: a,
		ctx: ctx,
		sessionName: sessionName,
		teamName: teamName,
	}
}

// Execute executes the request
//  @return Spirit
func (a *SessionTeamSpiritApiService) ListSessionTeamSpiritsExecute(r ApiListSessionTeamSpiritsRequest) (*Spirit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Spirit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SessionTeamSpiritApiService.ListSessionTeamSpirits")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sessions/{sessionName}/teams/{teamName}/spirits"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionName"+"}", url.PathEscape(parameterToString(r.sessionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamName"+"}", url.PathEscape(parameterToString(r.teamName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sessionName) < 1 {
		return localVarReturnValue, nil, reportError("sessionName must have at least 1 elements")
	}
	if strlen(r.teamName) < 1 {
		return localVarReturnValue, nil, reportError("teamName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiUpdateSessionTeamSpiritRequest struct {
	ctx context.Context
	ApiService *SessionTeamSpiritApiService
	sessionName string
	teamName string
	spiritName string
	spirit *Spirit
}

// Spirit to update
func (r ApiUpdateSessionTeamSpiritRequest) Spirit(spirit Spirit) ApiUpdateSessionTeamSpiritRequest {
	r.spirit = &spirit
	return r
}

func (r ApiUpdateSessionTeamSpiritRequest) Execute() (*Spirit, *http.Response, error) {
	return r.ApiService.UpdateSessionTeamSpiritExecute(r)
}

/*
UpdateSessionTeamSpirit Method for UpdateSessionTeamSpirit

Update Spirit

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param sessionName Spirit name
 @param teamName Spirit name
 @param spiritName Spirit name
 @return ApiUpdateSessionTeamSpiritRequest
*/
func (a *SessionTeamSpiritApiService) UpdateSessionTeamSpirit(ctx context.Context, sessionName string, teamName string, spiritName string) ApiUpdateSessionTeamSpiritRequest {
	return ApiUpdateSessionTeamSpiritRequest{
		ApiService: a,
		ctx: ctx,
		sessionName: sessionName,
		teamName: teamName,
		spiritName: spiritName,
	}
}

// Execute executes the request
//  @return Spirit
func (a *SessionTeamSpiritApiService) UpdateSessionTeamSpiritExecute(r ApiUpdateSessionTeamSpiritRequest) (*Spirit, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodPut
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *Spirit
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SessionTeamSpiritApiService.UpdateSessionTeamSpirit")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/sessions/{sessionName}/teams/{teamName}/spirits/{spiritName}"
	localVarPath = strings.Replace(localVarPath, "{"+"sessionName"+"}", url.PathEscape(parameterToString(r.sessionName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"teamName"+"}", url.PathEscape(parameterToString(r.teamName, "")), -1)
	localVarPath = strings.Replace(localVarPath, "{"+"spiritName"+"}", url.PathEscape(parameterToString(r.spiritName, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if strlen(r.sessionName) < 1 {
		return localVarReturnValue, nil, reportError("sessionName must have at least 1 elements")
	}
	if strlen(r.teamName) < 1 {
		return localVarReturnValue, nil, reportError("teamName must have at least 1 elements")
	}
	if strlen(r.spiritName) < 1 {
		return localVarReturnValue, nil, reportError("spiritName must have at least 1 elements")
	}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.spirit
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
