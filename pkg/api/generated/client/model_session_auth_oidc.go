/*
spirits

spirits is a turn-based battle royale game

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SessionAuthOidc OIDC authentication configuration
type SessionAuthOidc struct {
	// OIDC issuer to use for authentication
	Issuer *string `json:"issuer,omitempty"`
}

// NewSessionAuthOidc instantiates a new SessionAuthOidc object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionAuthOidc() *SessionAuthOidc {
	this := SessionAuthOidc{}
	var issuer string = "https://oh-great-spirits.herokuapp.com"
	this.Issuer = &issuer
	return &this
}

// NewSessionAuthOidcWithDefaults instantiates a new SessionAuthOidc object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionAuthOidcWithDefaults() *SessionAuthOidc {
	this := SessionAuthOidc{}
	var issuer string = "https://oh-great-spirits.herokuapp.com"
	this.Issuer = &issuer
	return &this
}

// GetIssuer returns the Issuer field value if set, zero value otherwise.
func (o *SessionAuthOidc) GetIssuer() string {
	if o == nil || o.Issuer == nil {
		var ret string
		return ret
	}
	return *o.Issuer
}

// GetIssuerOk returns a tuple with the Issuer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionAuthOidc) GetIssuerOk() (*string, bool) {
	if o == nil || o.Issuer == nil {
		return nil, false
	}
	return o.Issuer, true
}

// HasIssuer returns a boolean if a field has been set.
func (o *SessionAuthOidc) HasIssuer() bool {
	if o != nil && o.Issuer != nil {
		return true
	}

	return false
}

// SetIssuer gets a reference to the given string and assigns it to the Issuer field.
func (o *SessionAuthOidc) SetIssuer(v string) {
	o.Issuer = &v
}

func (o SessionAuthOidc) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Issuer != nil {
		toSerialize["issuer"] = o.Issuer
	}
	return json.Marshal(toSerialize)
}

type NullableSessionAuthOidc struct {
	value *SessionAuthOidc
	isSet bool
}

func (v NullableSessionAuthOidc) Get() *SessionAuthOidc {
	return v.value
}

func (v *NullableSessionAuthOidc) Set(val *SessionAuthOidc) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionAuthOidc) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionAuthOidc) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionAuthOidc(val *SessionAuthOidc) *NullableSessionAuthOidc {
	return &NullableSessionAuthOidc{value: val, isSet: true}
}

func (v NullableSessionAuthOidc) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionAuthOidc) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


