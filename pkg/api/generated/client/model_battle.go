/*
spirits

spirits is a turn-based battle royale game

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Battle A skirmish amongst Spirit's
type Battle struct {
	// The unique name of this Battle
	Name string `json:"name"`
	// The Team's involved in this Battle.
	Teams []string `json:"teams,omitempty"`
}

// NewBattle instantiates a new Battle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBattle(name string) *Battle {
	this := Battle{}
	this.Name = name
	return &this
}

// NewBattleWithDefaults instantiates a new Battle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBattleWithDefaults() *Battle {
	this := Battle{}
	return &this
}

// GetName returns the Name field value
func (o *Battle) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Battle) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Battle) SetName(v string) {
	o.Name = v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *Battle) GetTeams() []string {
	if o == nil || o.Teams == nil {
		var ret []string
		return ret
	}
	return o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Battle) GetTeamsOk() ([]string, bool) {
	if o == nil || o.Teams == nil {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *Battle) HasTeams() bool {
	if o != nil && o.Teams != nil {
		return true
	}

	return false
}

// SetTeams gets a reference to the given []string and assigns it to the Teams field.
func (o *Battle) SetTeams(v []string) {
	o.Teams = v
}

func (o Battle) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Teams != nil {
		toSerialize["teams"] = o.Teams
	}
	return json.Marshal(toSerialize)
}

type NullableBattle struct {
	value *Battle
	isSet bool
}

func (v NullableBattle) Get() *Battle {
	return v.value
}

func (v *NullableBattle) Set(val *Battle) {
	v.value = val
	v.isSet = true
}

func (v NullableBattle) IsSet() bool {
	return v.isSet
}

func (v *NullableBattle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBattle(val *Battle) *NullableBattle {
	return &NullableBattle{value: val, isSet: true}
}

func (v NullableBattle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBattle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


