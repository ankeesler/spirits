/*
spirits

spirits is a turn-based battle royale game

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// SessionAuth A description of the auth requirements for this Session; defaults to using the well-known OIDC provider
type SessionAuth struct {
	Oidc *SessionAuthOidc `json:"oidc,omitempty"`
}

// NewSessionAuth instantiates a new SessionAuth object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionAuth() *SessionAuth {
	this := SessionAuth{}
	return &this
}

// NewSessionAuthWithDefaults instantiates a new SessionAuth object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionAuthWithDefaults() *SessionAuth {
	this := SessionAuth{}
	return &this
}

// GetOidc returns the Oidc field value if set, zero value otherwise.
func (o *SessionAuth) GetOidc() SessionAuthOidc {
	if o == nil || o.Oidc == nil {
		var ret SessionAuthOidc
		return ret
	}
	return *o.Oidc
}

// GetOidcOk returns a tuple with the Oidc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionAuth) GetOidcOk() (*SessionAuthOidc, bool) {
	if o == nil || o.Oidc == nil {
		return nil, false
	}
	return o.Oidc, true
}

// HasOidc returns a boolean if a field has been set.
func (o *SessionAuth) HasOidc() bool {
	if o != nil && o.Oidc != nil {
		return true
	}

	return false
}

// SetOidc gets a reference to the given SessionAuthOidc and assigns it to the Oidc field.
func (o *SessionAuth) SetOidc(v SessionAuthOidc) {
	o.Oidc = &v
}

func (o SessionAuth) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Oidc != nil {
		toSerialize["oidc"] = o.Oidc
	}
	return json.Marshal(toSerialize)
}

type NullableSessionAuth struct {
	value *SessionAuth
	isSet bool
}

func (v NullableSessionAuth) Get() *SessionAuth {
	return v.value
}

func (v *NullableSessionAuth) Set(val *SessionAuth) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionAuth) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionAuth) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionAuth(val *SessionAuth) *NullableSessionAuth {
	return &NullableSessionAuth{value: val, isSet: true}
}

func (v NullableSessionAuth) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionAuth) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


