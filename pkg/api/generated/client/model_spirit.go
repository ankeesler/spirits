/*
spirits

spirits is a turn-based battle royale game

API version: 0.0.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// Spirit An actor in a Battle
type Spirit struct {
	// The unique name of this Spirit
	Name string `json:"name"`
	Stats SpiritStats `json:"stats"`
	// The Action's that this Spirit can perform
	Actions []string `json:"actions,omitempty"`
	// The AI setting for this Spirit
	Intelligence *string `json:"intelligence,omitempty"`
}

// NewSpirit instantiates a new Spirit object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSpirit(name string, stats SpiritStats) *Spirit {
	this := Spirit{}
	this.Name = name
	this.Stats = stats
	var intelligence string = "roundRobin"
	this.Intelligence = &intelligence
	return &this
}

// NewSpiritWithDefaults instantiates a new Spirit object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSpiritWithDefaults() *Spirit {
	this := Spirit{}
	var intelligence string = "roundRobin"
	this.Intelligence = &intelligence
	return &this
}

// GetName returns the Name field value
func (o *Spirit) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *Spirit) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *Spirit) SetName(v string) {
	o.Name = v
}

// GetStats returns the Stats field value
func (o *Spirit) GetStats() SpiritStats {
	if o == nil {
		var ret SpiritStats
		return ret
	}

	return o.Stats
}

// GetStatsOk returns a tuple with the Stats field value
// and a boolean to check if the value has been set.
func (o *Spirit) GetStatsOk() (*SpiritStats, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Stats, true
}

// SetStats sets field value
func (o *Spirit) SetStats(v SpiritStats) {
	o.Stats = v
}

// GetActions returns the Actions field value if set, zero value otherwise.
func (o *Spirit) GetActions() []string {
	if o == nil || o.Actions == nil {
		var ret []string
		return ret
	}
	return o.Actions
}

// GetActionsOk returns a tuple with the Actions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spirit) GetActionsOk() ([]string, bool) {
	if o == nil || o.Actions == nil {
		return nil, false
	}
	return o.Actions, true
}

// HasActions returns a boolean if a field has been set.
func (o *Spirit) HasActions() bool {
	if o != nil && o.Actions != nil {
		return true
	}

	return false
}

// SetActions gets a reference to the given []string and assigns it to the Actions field.
func (o *Spirit) SetActions(v []string) {
	o.Actions = v
}

// GetIntelligence returns the Intelligence field value if set, zero value otherwise.
func (o *Spirit) GetIntelligence() string {
	if o == nil || o.Intelligence == nil {
		var ret string
		return ret
	}
	return *o.Intelligence
}

// GetIntelligenceOk returns a tuple with the Intelligence field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Spirit) GetIntelligenceOk() (*string, bool) {
	if o == nil || o.Intelligence == nil {
		return nil, false
	}
	return o.Intelligence, true
}

// HasIntelligence returns a boolean if a field has been set.
func (o *Spirit) HasIntelligence() bool {
	if o != nil && o.Intelligence != nil {
		return true
	}

	return false
}

// SetIntelligence gets a reference to the given string and assigns it to the Intelligence field.
func (o *Spirit) SetIntelligence(v string) {
	o.Intelligence = &v
}

func (o Spirit) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["name"] = o.Name
	}
	if true {
		toSerialize["stats"] = o.Stats
	}
	if o.Actions != nil {
		toSerialize["actions"] = o.Actions
	}
	if o.Intelligence != nil {
		toSerialize["intelligence"] = o.Intelligence
	}
	return json.Marshal(toSerialize)
}

type NullableSpirit struct {
	value *Spirit
	isSet bool
}

func (v NullableSpirit) Get() *Spirit {
	return v.value
}

func (v *NullableSpirit) Set(val *Spirit) {
	v.value = val
	v.isSet = true
}

func (v NullableSpirit) IsSet() bool {
	return v.isSet
}

func (v *NullableSpirit) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpirit(val *Spirit) *NullableSpirit {
	return &NullableSpirit{value: val, isSet: true}
}

func (v NullableSpirit) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpirit) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


