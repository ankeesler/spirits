// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spirits/v1/battle.proto

package spiritsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBattleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBattleRequestMultiError, or nil if none found.
func (m *CreateBattleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBattleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBattleRequestMultiError(errors)
	}

	return nil
}

// CreateBattleRequestMultiError is an error wrapping multiple validation
// errors returned by CreateBattleRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateBattleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBattleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBattleRequestMultiError) AllErrors() []error { return m }

// CreateBattleRequestValidationError is the validation error returned by
// CreateBattleRequest.Validate if the designated constraints aren't met.
type CreateBattleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBattleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBattleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBattleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBattleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBattleRequestValidationError) ErrorName() string {
	return "CreateBattleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBattleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBattleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBattleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBattleRequestValidationError{}

// Validate checks the field values on CreateBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateBattleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBattleResponseMultiError, or nil if none found.
func (m *CreateBattleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBattleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBattle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBattle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateBattleResponseValidationError{
				field:  "Battle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateBattleResponseMultiError(errors)
	}

	return nil
}

// CreateBattleResponseMultiError is an error wrapping multiple validation
// errors returned by CreateBattleResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateBattleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBattleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBattleResponseMultiError) AllErrors() []error { return m }

// CreateBattleResponseValidationError is the validation error returned by
// CreateBattleResponse.Validate if the designated constraints aren't met.
type CreateBattleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBattleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBattleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBattleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBattleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBattleResponseValidationError) ErrorName() string {
	return "CreateBattleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBattleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBattleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBattleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBattleResponseValidationError{}

// Validate checks the field values on ListBattlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBattlesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBattlesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBattlesRequestMultiError, or nil if none found.
func (m *ListBattlesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBattlesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListBattlesRequestMultiError(errors)
	}

	return nil
}

// ListBattlesRequestMultiError is an error wrapping multiple validation errors
// returned by ListBattlesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListBattlesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBattlesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBattlesRequestMultiError) AllErrors() []error { return m }

// ListBattlesRequestValidationError is the validation error returned by
// ListBattlesRequest.Validate if the designated constraints aren't met.
type ListBattlesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBattlesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBattlesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBattlesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBattlesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBattlesRequestValidationError) ErrorName() string {
	return "ListBattlesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListBattlesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBattlesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBattlesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBattlesRequestValidationError{}

// Validate checks the field values on ListBattlesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListBattlesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListBattlesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListBattlesResponseMultiError, or nil if none found.
func (m *ListBattlesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListBattlesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBattles() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListBattlesResponseValidationError{
						field:  fmt.Sprintf("Battles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListBattlesResponseValidationError{
						field:  fmt.Sprintf("Battles[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListBattlesResponseValidationError{
					field:  fmt.Sprintf("Battles[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListBattlesResponseMultiError(errors)
	}

	return nil
}

// ListBattlesResponseMultiError is an error wrapping multiple validation
// errors returned by ListBattlesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListBattlesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListBattlesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListBattlesResponseMultiError) AllErrors() []error { return m }

// ListBattlesResponseValidationError is the validation error returned by
// ListBattlesResponse.Validate if the designated constraints aren't met.
type ListBattlesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListBattlesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListBattlesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListBattlesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListBattlesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListBattlesResponseValidationError) ErrorName() string {
	return "ListBattlesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListBattlesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListBattlesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListBattlesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListBattlesResponseValidationError{}

// Validate checks the field values on WatchBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchBattleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchBattleRequestMultiError, or nil if none found.
func (m *WatchBattleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBattleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return WatchBattleRequestMultiError(errors)
	}

	return nil
}

// WatchBattleRequestMultiError is an error wrapping multiple validation errors
// returned by WatchBattleRequest.ValidateAll() if the designated constraints
// aren't met.
type WatchBattleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBattleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBattleRequestMultiError) AllErrors() []error { return m }

// WatchBattleRequestValidationError is the validation error returned by
// WatchBattleRequest.Validate if the designated constraints aren't met.
type WatchBattleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBattleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBattleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBattleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBattleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBattleRequestValidationError) ErrorName() string {
	return "WatchBattleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBattleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBattleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBattleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBattleRequestValidationError{}

// Validate checks the field values on WatchBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchBattleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchBattleResponseMultiError, or nil if none found.
func (m *WatchBattleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchBattleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBattle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBattle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchBattleResponseValidationError{
				field:  "Battle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchBattleResponseMultiError(errors)
	}

	return nil
}

// WatchBattleResponseMultiError is an error wrapping multiple validation
// errors returned by WatchBattleResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchBattleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchBattleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchBattleResponseMultiError) AllErrors() []error { return m }

// WatchBattleResponseValidationError is the validation error returned by
// WatchBattleResponse.Validate if the designated constraints aren't met.
type WatchBattleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchBattleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchBattleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchBattleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchBattleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchBattleResponseValidationError) ErrorName() string {
	return "WatchBattleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchBattleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchBattleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchBattleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchBattleResponseValidationError{}

// Validate checks the field values on AddBattleTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBattleTeamRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBattleTeamRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBattleTeamRequestMultiError, or nil if none found.
func (m *AddBattleTeamRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBattleTeamRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BattleId

	// no validation rules for TeamName

	if len(errors) > 0 {
		return AddBattleTeamRequestMultiError(errors)
	}

	return nil
}

// AddBattleTeamRequestMultiError is an error wrapping multiple validation
// errors returned by AddBattleTeamRequest.ValidateAll() if the designated
// constraints aren't met.
type AddBattleTeamRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBattleTeamRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBattleTeamRequestMultiError) AllErrors() []error { return m }

// AddBattleTeamRequestValidationError is the validation error returned by
// AddBattleTeamRequest.Validate if the designated constraints aren't met.
type AddBattleTeamRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBattleTeamRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBattleTeamRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBattleTeamRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBattleTeamRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBattleTeamRequestValidationError) ErrorName() string {
	return "AddBattleTeamRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBattleTeamRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBattleTeamRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBattleTeamRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBattleTeamRequestValidationError{}

// Validate checks the field values on AddBattleTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBattleTeamResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBattleTeamResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBattleTeamResponseMultiError, or nil if none found.
func (m *AddBattleTeamResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBattleTeamResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBattle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBattleTeamResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBattleTeamResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBattle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBattleTeamResponseValidationError{
				field:  "Battle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBattleTeamResponseMultiError(errors)
	}

	return nil
}

// AddBattleTeamResponseMultiError is an error wrapping multiple validation
// errors returned by AddBattleTeamResponse.ValidateAll() if the designated
// constraints aren't met.
type AddBattleTeamResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBattleTeamResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBattleTeamResponseMultiError) AllErrors() []error { return m }

// AddBattleTeamResponseValidationError is the validation error returned by
// AddBattleTeamResponse.Validate if the designated constraints aren't met.
type AddBattleTeamResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBattleTeamResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBattleTeamResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBattleTeamResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBattleTeamResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBattleTeamResponseValidationError) ErrorName() string {
	return "AddBattleTeamResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddBattleTeamResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBattleTeamResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBattleTeamResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBattleTeamResponseValidationError{}

// Validate checks the field values on AddBattleTeamSpiritRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBattleTeamSpiritRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBattleTeamSpiritRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBattleTeamSpiritRequestMultiError, or nil if none found.
func (m *AddBattleTeamSpiritRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBattleTeamSpiritRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BattleId

	// no validation rules for TeamName

	// no validation rules for SpiritId

	// no validation rules for Intelligence

	// no validation rules for Seed

	if len(errors) > 0 {
		return AddBattleTeamSpiritRequestMultiError(errors)
	}

	return nil
}

// AddBattleTeamSpiritRequestMultiError is an error wrapping multiple
// validation errors returned by AddBattleTeamSpiritRequest.ValidateAll() if
// the designated constraints aren't met.
type AddBattleTeamSpiritRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBattleTeamSpiritRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBattleTeamSpiritRequestMultiError) AllErrors() []error { return m }

// AddBattleTeamSpiritRequestValidationError is the validation error returned
// by AddBattleTeamSpiritRequest.Validate if the designated constraints aren't met.
type AddBattleTeamSpiritRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBattleTeamSpiritRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBattleTeamSpiritRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBattleTeamSpiritRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBattleTeamSpiritRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBattleTeamSpiritRequestValidationError) ErrorName() string {
	return "AddBattleTeamSpiritRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddBattleTeamSpiritRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBattleTeamSpiritRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBattleTeamSpiritRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBattleTeamSpiritRequestValidationError{}

// Validate checks the field values on AddBattleTeamSpiritResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddBattleTeamSpiritResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddBattleTeamSpiritResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddBattleTeamSpiritResponseMultiError, or nil if none found.
func (m *AddBattleTeamSpiritResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddBattleTeamSpiritResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBattle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, AddBattleTeamSpiritResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, AddBattleTeamSpiritResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBattle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return AddBattleTeamSpiritResponseValidationError{
				field:  "Battle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return AddBattleTeamSpiritResponseMultiError(errors)
	}

	return nil
}

// AddBattleTeamSpiritResponseMultiError is an error wrapping multiple
// validation errors returned by AddBattleTeamSpiritResponse.ValidateAll() if
// the designated constraints aren't met.
type AddBattleTeamSpiritResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddBattleTeamSpiritResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddBattleTeamSpiritResponseMultiError) AllErrors() []error { return m }

// AddBattleTeamSpiritResponseValidationError is the validation error returned
// by AddBattleTeamSpiritResponse.Validate if the designated constraints
// aren't met.
type AddBattleTeamSpiritResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddBattleTeamSpiritResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddBattleTeamSpiritResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddBattleTeamSpiritResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddBattleTeamSpiritResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddBattleTeamSpiritResponseValidationError) ErrorName() string {
	return "AddBattleTeamSpiritResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddBattleTeamSpiritResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddBattleTeamSpiritResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddBattleTeamSpiritResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddBattleTeamSpiritResponseValidationError{}

// Validate checks the field values on StartBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBattleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBattleRequestMultiError, or nil if none found.
func (m *StartBattleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBattleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return StartBattleRequestMultiError(errors)
	}

	return nil
}

// StartBattleRequestMultiError is an error wrapping multiple validation errors
// returned by StartBattleRequest.ValidateAll() if the designated constraints
// aren't met.
type StartBattleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBattleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBattleRequestMultiError) AllErrors() []error { return m }

// StartBattleRequestValidationError is the validation error returned by
// StartBattleRequest.Validate if the designated constraints aren't met.
type StartBattleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBattleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBattleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBattleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBattleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBattleRequestValidationError) ErrorName() string {
	return "StartBattleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e StartBattleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBattleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBattleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBattleRequestValidationError{}

// Validate checks the field values on StartBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *StartBattleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StartBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StartBattleResponseMultiError, or nil if none found.
func (m *StartBattleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *StartBattleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBattle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StartBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StartBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBattle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StartBattleResponseValidationError{
				field:  "Battle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StartBattleResponseMultiError(errors)
	}

	return nil
}

// StartBattleResponseMultiError is an error wrapping multiple validation
// errors returned by StartBattleResponse.ValidateAll() if the designated
// constraints aren't met.
type StartBattleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StartBattleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StartBattleResponseMultiError) AllErrors() []error { return m }

// StartBattleResponseValidationError is the validation error returned by
// StartBattleResponse.Validate if the designated constraints aren't met.
type StartBattleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StartBattleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StartBattleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StartBattleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StartBattleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StartBattleResponseValidationError) ErrorName() string {
	return "StartBattleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e StartBattleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStartBattleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StartBattleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StartBattleResponseValidationError{}

// Validate checks the field values on CancelBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelBattleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBattleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelBattleRequestMultiError, or nil if none found.
func (m *CancelBattleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBattleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CancelBattleRequestMultiError(errors)
	}

	return nil
}

// CancelBattleRequestMultiError is an error wrapping multiple validation
// errors returned by CancelBattleRequest.ValidateAll() if the designated
// constraints aren't met.
type CancelBattleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBattleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBattleRequestMultiError) AllErrors() []error { return m }

// CancelBattleRequestValidationError is the validation error returned by
// CancelBattleRequest.Validate if the designated constraints aren't met.
type CancelBattleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBattleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBattleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBattleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBattleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBattleRequestValidationError) ErrorName() string {
	return "CancelBattleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBattleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBattleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBattleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBattleRequestValidationError{}

// Validate checks the field values on CancelBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CancelBattleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CancelBattleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CancelBattleResponseMultiError, or nil if none found.
func (m *CancelBattleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CancelBattleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetBattle()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CancelBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CancelBattleResponseValidationError{
					field:  "Battle",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetBattle()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CancelBattleResponseValidationError{
				field:  "Battle",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CancelBattleResponseMultiError(errors)
	}

	return nil
}

// CancelBattleResponseMultiError is an error wrapping multiple validation
// errors returned by CancelBattleResponse.ValidateAll() if the designated
// constraints aren't met.
type CancelBattleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CancelBattleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CancelBattleResponseMultiError) AllErrors() []error { return m }

// CancelBattleResponseValidationError is the validation error returned by
// CancelBattleResponse.Validate if the designated constraints aren't met.
type CancelBattleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CancelBattleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CancelBattleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CancelBattleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CancelBattleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CancelBattleResponseValidationError) ErrorName() string {
	return "CancelBattleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CancelBattleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCancelBattleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CancelBattleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CancelBattleResponseValidationError{}

// Validate checks the field values on CallActionRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CallActionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallActionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallActionRequestMultiError, or nil if none found.
func (m *CallActionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CallActionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for BattleId

	// no validation rules for SpiritId

	// no validation rules for Turn

	// no validation rules for ActionName

	if len(errors) > 0 {
		return CallActionRequestMultiError(errors)
	}

	return nil
}

// CallActionRequestMultiError is an error wrapping multiple validation errors
// returned by CallActionRequest.ValidateAll() if the designated constraints
// aren't met.
type CallActionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallActionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallActionRequestMultiError) AllErrors() []error { return m }

// CallActionRequestValidationError is the validation error returned by
// CallActionRequest.Validate if the designated constraints aren't met.
type CallActionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallActionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallActionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallActionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallActionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallActionRequestValidationError) ErrorName() string {
	return "CallActionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CallActionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallActionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallActionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallActionRequestValidationError{}

// Validate checks the field values on CallActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CallActionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CallActionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CallActionResponseMultiError, or nil if none found.
func (m *CallActionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CallActionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CallActionResponseMultiError(errors)
	}

	return nil
}

// CallActionResponseMultiError is an error wrapping multiple validation errors
// returned by CallActionResponse.ValidateAll() if the designated constraints
// aren't met.
type CallActionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CallActionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CallActionResponseMultiError) AllErrors() []error { return m }

// CallActionResponseValidationError is the validation error returned by
// CallActionResponse.Validate if the designated constraints aren't met.
type CallActionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CallActionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CallActionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CallActionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CallActionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CallActionResponseValidationError) ErrorName() string {
	return "CallActionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CallActionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCallActionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CallActionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CallActionResponseValidationError{}

// Validate checks the field values on Battle with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Battle) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Battle with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in BattleMultiError, or nil if none found.
func (m *Battle) ValidateAll() error {
	return m.validate(true)
}

func (m *Battle) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BattleValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BattleValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BattleValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for State

	for idx, item := range m.GetTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BattleValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BattleValidationError{
						field:  fmt.Sprintf("Teams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BattleValidationError{
					field:  fmt.Sprintf("Teams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetInBattleTeams() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BattleValidationError{
						field:  fmt.Sprintf("InBattleTeams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BattleValidationError{
						field:  fmt.Sprintf("InBattleTeams[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BattleValidationError{
					field:  fmt.Sprintf("InBattleTeams[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Turns

	if m.ErrorMessage != nil {
		// no validation rules for ErrorMessage
	}

	if len(errors) > 0 {
		return BattleMultiError(errors)
	}

	return nil
}

// BattleMultiError is an error wrapping multiple validation errors returned by
// Battle.ValidateAll() if the designated constraints aren't met.
type BattleMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BattleMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BattleMultiError) AllErrors() []error { return m }

// BattleValidationError is the validation error returned by Battle.Validate if
// the designated constraints aren't met.
type BattleValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BattleValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BattleValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BattleValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BattleValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BattleValidationError) ErrorName() string { return "BattleValidationError" }

// Error satisfies the builtin error interface
func (e BattleValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBattle.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BattleValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BattleValidationError{}

// Validate checks the field values on BattleTeam with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *BattleTeam) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BattleTeam with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in BattleTeamMultiError, or
// nil if none found.
func (m *BattleTeam) ValidateAll() error {
	return m.validate(true)
}

func (m *BattleTeam) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetSpirits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, BattleTeamValidationError{
						field:  fmt.Sprintf("Spirits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, BattleTeamValidationError{
						field:  fmt.Sprintf("Spirits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return BattleTeamValidationError{
					field:  fmt.Sprintf("Spirits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return BattleTeamMultiError(errors)
	}

	return nil
}

// BattleTeamMultiError is an error wrapping multiple validation errors
// returned by BattleTeam.ValidateAll() if the designated constraints aren't met.
type BattleTeamMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BattleTeamMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BattleTeamMultiError) AllErrors() []error { return m }

// BattleTeamValidationError is the validation error returned by
// BattleTeam.Validate if the designated constraints aren't met.
type BattleTeamValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BattleTeamValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BattleTeamValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BattleTeamValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BattleTeamValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BattleTeamValidationError) ErrorName() string { return "BattleTeamValidationError" }

// Error satisfies the builtin error interface
func (e BattleTeamValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBattleTeam.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BattleTeamValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BattleTeamValidationError{}

// Validate checks the field values on BattleTeamSpirit with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *BattleTeamSpirit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on BattleTeamSpirit with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// BattleTeamSpiritMultiError, or nil if none found.
func (m *BattleTeamSpirit) ValidateAll() error {
	return m.validate(true)
}

func (m *BattleTeamSpirit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpirit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, BattleTeamSpiritValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, BattleTeamSpiritValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpirit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return BattleTeamSpiritValidationError{
				field:  "Spirit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Intelligence

	// no validation rules for Seed

	if len(errors) > 0 {
		return BattleTeamSpiritMultiError(errors)
	}

	return nil
}

// BattleTeamSpiritMultiError is an error wrapping multiple validation errors
// returned by BattleTeamSpirit.ValidateAll() if the designated constraints
// aren't met.
type BattleTeamSpiritMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m BattleTeamSpiritMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m BattleTeamSpiritMultiError) AllErrors() []error { return m }

// BattleTeamSpiritValidationError is the validation error returned by
// BattleTeamSpirit.Validate if the designated constraints aren't met.
type BattleTeamSpiritValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e BattleTeamSpiritValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e BattleTeamSpiritValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e BattleTeamSpiritValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e BattleTeamSpiritValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e BattleTeamSpiritValidationError) ErrorName() string { return "BattleTeamSpiritValidationError" }

// Error satisfies the builtin error interface
func (e BattleTeamSpiritValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sBattleTeamSpirit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = BattleTeamSpiritValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = BattleTeamSpiritValidationError{}
