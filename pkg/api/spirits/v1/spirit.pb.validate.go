// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: spirits/v1/spirit.proto

package spiritsv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on CreateSpiritRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpiritRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpiritRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpiritRequestMultiError, or nil if none found.
func (m *CreateSpiritRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpiritRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpirit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSpiritRequestValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSpiritRequestValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpirit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSpiritRequestValidationError{
				field:  "Spirit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSpiritRequestMultiError(errors)
	}

	return nil
}

// CreateSpiritRequestMultiError is an error wrapping multiple validation
// errors returned by CreateSpiritRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateSpiritRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpiritRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpiritRequestMultiError) AllErrors() []error { return m }

// CreateSpiritRequestValidationError is the validation error returned by
// CreateSpiritRequest.Validate if the designated constraints aren't met.
type CreateSpiritRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpiritRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpiritRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpiritRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpiritRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpiritRequestValidationError) ErrorName() string {
	return "CreateSpiritRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpiritRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpiritRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpiritRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpiritRequestValidationError{}

// Validate checks the field values on CreateSpiritResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateSpiritResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateSpiritResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateSpiritResponseMultiError, or nil if none found.
func (m *CreateSpiritResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateSpiritResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpirit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpirit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateSpiritResponseValidationError{
				field:  "Spirit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateSpiritResponseMultiError(errors)
	}

	return nil
}

// CreateSpiritResponseMultiError is an error wrapping multiple validation
// errors returned by CreateSpiritResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateSpiritResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateSpiritResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateSpiritResponseMultiError) AllErrors() []error { return m }

// CreateSpiritResponseValidationError is the validation error returned by
// CreateSpiritResponse.Validate if the designated constraints aren't met.
type CreateSpiritResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateSpiritResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateSpiritResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateSpiritResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateSpiritResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateSpiritResponseValidationError) ErrorName() string {
	return "CreateSpiritResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateSpiritResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateSpiritResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateSpiritResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateSpiritResponseValidationError{}

// Validate checks the field values on GetSpiritRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSpiritRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpiritRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpiritRequestMultiError, or nil if none found.
func (m *GetSpiritRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpiritRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetSpiritRequestMultiError(errors)
	}

	return nil
}

// GetSpiritRequestMultiError is an error wrapping multiple validation errors
// returned by GetSpiritRequest.ValidateAll() if the designated constraints
// aren't met.
type GetSpiritRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpiritRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpiritRequestMultiError) AllErrors() []error { return m }

// GetSpiritRequestValidationError is the validation error returned by
// GetSpiritRequest.Validate if the designated constraints aren't met.
type GetSpiritRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpiritRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpiritRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpiritRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpiritRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpiritRequestValidationError) ErrorName() string { return "GetSpiritRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetSpiritRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpiritRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpiritRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpiritRequestValidationError{}

// Validate checks the field values on GetSpiritResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetSpiritResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetSpiritResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetSpiritResponseMultiError, or nil if none found.
func (m *GetSpiritResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetSpiritResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpirit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpirit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetSpiritResponseValidationError{
				field:  "Spirit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetSpiritResponseMultiError(errors)
	}

	return nil
}

// GetSpiritResponseMultiError is an error wrapping multiple validation errors
// returned by GetSpiritResponse.ValidateAll() if the designated constraints
// aren't met.
type GetSpiritResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetSpiritResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetSpiritResponseMultiError) AllErrors() []error { return m }

// GetSpiritResponseValidationError is the validation error returned by
// GetSpiritResponse.Validate if the designated constraints aren't met.
type GetSpiritResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetSpiritResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetSpiritResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetSpiritResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetSpiritResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetSpiritResponseValidationError) ErrorName() string {
	return "GetSpiritResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetSpiritResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetSpiritResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetSpiritResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetSpiritResponseValidationError{}

// Validate checks the field values on ListSpiritsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSpiritsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpiritsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpiritsRequestMultiError, or nil if none found.
func (m *ListSpiritsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpiritsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.Name != nil {
		// no validation rules for Name
	}

	if len(errors) > 0 {
		return ListSpiritsRequestMultiError(errors)
	}

	return nil
}

// ListSpiritsRequestMultiError is an error wrapping multiple validation errors
// returned by ListSpiritsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListSpiritsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpiritsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpiritsRequestMultiError) AllErrors() []error { return m }

// ListSpiritsRequestValidationError is the validation error returned by
// ListSpiritsRequest.Validate if the designated constraints aren't met.
type ListSpiritsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpiritsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpiritsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpiritsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpiritsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpiritsRequestValidationError) ErrorName() string {
	return "ListSpiritsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSpiritsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpiritsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpiritsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpiritsRequestValidationError{}

// Validate checks the field values on ListSpiritsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSpiritsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSpiritsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSpiritsResponseMultiError, or nil if none found.
func (m *ListSpiritsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSpiritsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetSpirits() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSpiritsResponseValidationError{
						field:  fmt.Sprintf("Spirits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSpiritsResponseValidationError{
						field:  fmt.Sprintf("Spirits[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSpiritsResponseValidationError{
					field:  fmt.Sprintf("Spirits[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSpiritsResponseMultiError(errors)
	}

	return nil
}

// ListSpiritsResponseMultiError is an error wrapping multiple validation
// errors returned by ListSpiritsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSpiritsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSpiritsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSpiritsResponseMultiError) AllErrors() []error { return m }

// ListSpiritsResponseValidationError is the validation error returned by
// ListSpiritsResponse.Validate if the designated constraints aren't met.
type ListSpiritsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSpiritsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSpiritsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSpiritsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSpiritsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSpiritsResponseValidationError) ErrorName() string {
	return "ListSpiritsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSpiritsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSpiritsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSpiritsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSpiritsResponseValidationError{}

// Validate checks the field values on UpdateSpiritRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpiritRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpiritRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpiritRequestMultiError, or nil if none found.
func (m *UpdateSpiritRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpiritRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpirit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSpiritRequestValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSpiritRequestValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpirit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSpiritRequestValidationError{
				field:  "Spirit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSpiritRequestMultiError(errors)
	}

	return nil
}

// UpdateSpiritRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateSpiritRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateSpiritRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpiritRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpiritRequestMultiError) AllErrors() []error { return m }

// UpdateSpiritRequestValidationError is the validation error returned by
// UpdateSpiritRequest.Validate if the designated constraints aren't met.
type UpdateSpiritRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpiritRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpiritRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpiritRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpiritRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpiritRequestValidationError) ErrorName() string {
	return "UpdateSpiritRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpiritRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpiritRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpiritRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpiritRequestValidationError{}

// Validate checks the field values on UpdateSpiritResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateSpiritResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateSpiritResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateSpiritResponseMultiError, or nil if none found.
func (m *UpdateSpiritResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateSpiritResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpirit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpirit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateSpiritResponseValidationError{
				field:  "Spirit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateSpiritResponseMultiError(errors)
	}

	return nil
}

// UpdateSpiritResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateSpiritResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateSpiritResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateSpiritResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateSpiritResponseMultiError) AllErrors() []error { return m }

// UpdateSpiritResponseValidationError is the validation error returned by
// UpdateSpiritResponse.Validate if the designated constraints aren't met.
type UpdateSpiritResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateSpiritResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateSpiritResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateSpiritResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateSpiritResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateSpiritResponseValidationError) ErrorName() string {
	return "UpdateSpiritResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateSpiritResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateSpiritResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateSpiritResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateSpiritResponseValidationError{}

// Validate checks the field values on DeleteSpiritRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpiritRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpiritRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpiritRequestMultiError, or nil if none found.
func (m *DeleteSpiritRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpiritRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteSpiritRequestMultiError(errors)
	}

	return nil
}

// DeleteSpiritRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteSpiritRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteSpiritRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpiritRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpiritRequestMultiError) AllErrors() []error { return m }

// DeleteSpiritRequestValidationError is the validation error returned by
// DeleteSpiritRequest.Validate if the designated constraints aren't met.
type DeleteSpiritRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpiritRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpiritRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpiritRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpiritRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpiritRequestValidationError) ErrorName() string {
	return "DeleteSpiritRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpiritRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpiritRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpiritRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpiritRequestValidationError{}

// Validate checks the field values on DeleteSpiritResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteSpiritResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteSpiritResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteSpiritResponseMultiError, or nil if none found.
func (m *DeleteSpiritResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteSpiritResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetSpirit()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteSpiritResponseValidationError{
					field:  "Spirit",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetSpirit()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteSpiritResponseValidationError{
				field:  "Spirit",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteSpiritResponseMultiError(errors)
	}

	return nil
}

// DeleteSpiritResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteSpiritResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteSpiritResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteSpiritResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteSpiritResponseMultiError) AllErrors() []error { return m }

// DeleteSpiritResponseValidationError is the validation error returned by
// DeleteSpiritResponse.Validate if the designated constraints aren't met.
type DeleteSpiritResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteSpiritResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteSpiritResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteSpiritResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteSpiritResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteSpiritResponseValidationError) ErrorName() string {
	return "DeleteSpiritResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteSpiritResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteSpiritResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteSpiritResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteSpiritResponseValidationError{}

// Validate checks the field values on Spirit with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Spirit) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Spirit with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in SpiritMultiError, or nil if none found.
func (m *Spirit) ValidateAll() error {
	return m.validate(true)
}

func (m *Spirit) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpiritValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpiritValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpiritValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := SpiritValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetStats()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SpiritValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SpiritValidationError{
					field:  "Stats",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStats()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SpiritValidationError{
				field:  "Stats",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetActions() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpiritValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpiritValidationError{
						field:  fmt.Sprintf("Actions[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpiritValidationError{
					field:  fmt.Sprintf("Actions[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return SpiritMultiError(errors)
	}

	return nil
}

// SpiritMultiError is an error wrapping multiple validation errors returned by
// Spirit.ValidateAll() if the designated constraints aren't met.
type SpiritMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpiritMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpiritMultiError) AllErrors() []error { return m }

// SpiritValidationError is the validation error returned by Spirit.Validate if
// the designated constraints aren't met.
type SpiritValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpiritValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpiritValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpiritValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpiritValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpiritValidationError) ErrorName() string { return "SpiritValidationError" }

// Error satisfies the builtin error interface
func (e SpiritValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpirit.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpiritValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpiritValidationError{}

// Validate checks the field values on SpiritStats with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpiritStats) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpiritStats with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpiritStatsMultiError, or
// nil if none found.
func (m *SpiritStats) ValidateAll() error {
	return m.validate(true)
}

func (m *SpiritStats) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Health

	// no validation rules for PhysicalPower

	// no validation rules for PhysicalConstitution

	// no validation rules for MentalPower

	// no validation rules for MentalConstitution

	// no validation rules for Agility

	if len(errors) > 0 {
		return SpiritStatsMultiError(errors)
	}

	return nil
}

// SpiritStatsMultiError is an error wrapping multiple validation errors
// returned by SpiritStats.ValidateAll() if the designated constraints aren't met.
type SpiritStatsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpiritStatsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpiritStatsMultiError) AllErrors() []error { return m }

// SpiritStatsValidationError is the validation error returned by
// SpiritStats.Validate if the designated constraints aren't met.
type SpiritStatsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpiritStatsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpiritStatsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpiritStatsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpiritStatsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpiritStatsValidationError) ErrorName() string { return "SpiritStatsValidationError" }

// Error satisfies the builtin error interface
func (e SpiritStatsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpiritStats.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpiritStatsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpiritStatsValidationError{}

// Validate checks the field values on SpiritAction with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *SpiritAction) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SpiritAction with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in SpiritActionMultiError, or
// nil if none found.
func (m *SpiritAction) ValidateAll() error {
	return m.validate(true)
}

func (m *SpiritAction) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	switch v := m.Definition.(type) {
	case *SpiritAction_ActionId:
		if v == nil {
			err := SpiritActionValidationError{
				field:  "Definition",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ActionId
	case *SpiritAction_Inline:
		if v == nil {
			err := SpiritActionValidationError{
				field:  "Definition",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInline()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SpiritActionValidationError{
						field:  "Inline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SpiritActionValidationError{
						field:  "Inline",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInline()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SpiritActionValidationError{
					field:  "Inline",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SpiritActionMultiError(errors)
	}

	return nil
}

// SpiritActionMultiError is an error wrapping multiple validation errors
// returned by SpiritAction.ValidateAll() if the designated constraints aren't met.
type SpiritActionMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SpiritActionMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SpiritActionMultiError) AllErrors() []error { return m }

// SpiritActionValidationError is the validation error returned by
// SpiritAction.Validate if the designated constraints aren't met.
type SpiritActionValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SpiritActionValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SpiritActionValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SpiritActionValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SpiritActionValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SpiritActionValidationError) ErrorName() string { return "SpiritActionValidationError" }

// Error satisfies the builtin error interface
func (e SpiritActionValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSpiritAction.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SpiritActionValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SpiritActionValidationError{}
