// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"

	scheme "github.com/ankeesler/spirits/pkg/apis/clientset/versioned/scheme"
	v1alpha1 "github.com/ankeesler/spirits/pkg/apis/spirits/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	rest "k8s.io/client-go/rest"
)

// ActionRequestsGetter has a method to return a ActionRequestInterface.
// A group's client should implement this interface.
type ActionRequestsGetter interface {
	ActionRequests(namespace string) ActionRequestInterface
}

// ActionRequestInterface has methods to work with ActionRequest resources.
type ActionRequestInterface interface {
	Create(ctx context.Context, actionRequest *v1alpha1.ActionRequest, opts v1.CreateOptions) (*v1alpha1.ActionRequest, error)
	ActionRequestExpansion
}

// actionRequests implements ActionRequestInterface
type actionRequests struct {
	client rest.Interface
	ns     string
}

// newActionRequests returns a ActionRequests
func newActionRequests(c *SpiritsV1alpha1Client, namespace string) *actionRequests {
	return &actionRequests{
		client: c.RESTClient(),
		ns:     namespace,
	}
}

// Create takes the representation of a actionRequest and creates it.  Returns the server's representation of the actionRequest, and an error, if there is any.
func (c *actionRequests) Create(ctx context.Context, actionRequest *v1alpha1.ActionRequest, opts v1.CreateOptions) (result *v1alpha1.ActionRequest, err error) {
	result = &v1alpha1.ActionRequest{}
	err = c.client.Post().
		Namespace(c.ns).
		Resource("actionrequests").
		VersionedParams(&opts, scheme.ParameterCodec).
		Body(actionRequest).
		Do(ctx).
		Into(result)
	return
}
