// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: spirit.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// SpiritServiceClient is the client API for SpiritService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpiritServiceClient interface {
	CreateSpirit(ctx context.Context, in *CreateSpiritRequest, opts ...grpc.CallOption) (*CreateSpiritResponse, error)
	GetSpirit(ctx context.Context, in *GetSpiritRequest, opts ...grpc.CallOption) (*GetSpiritResponse, error)
	ListSpirits(ctx context.Context, in *ListSpiritsRequest, opts ...grpc.CallOption) (*ListSpiritsResponse, error)
	UpdateSpirit(ctx context.Context, in *UpdateSpiritRequest, opts ...grpc.CallOption) (*UpdateSpiritResponse, error)
	DeleteSpirit(ctx context.Context, in *DeleteSpiritRequest, opts ...grpc.CallOption) (*DeleteSpiritResponse, error)
}

type spiritServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewSpiritServiceClient(cc grpc.ClientConnInterface) SpiritServiceClient {
	return &spiritServiceClient{cc}
}

func (c *spiritServiceClient) CreateSpirit(ctx context.Context, in *CreateSpiritRequest, opts ...grpc.CallOption) (*CreateSpiritResponse, error) {
	out := new(CreateSpiritResponse)
	err := c.cc.Invoke(ctx, "/spirits.SpiritService/CreateSpirit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiritServiceClient) GetSpirit(ctx context.Context, in *GetSpiritRequest, opts ...grpc.CallOption) (*GetSpiritResponse, error) {
	out := new(GetSpiritResponse)
	err := c.cc.Invoke(ctx, "/spirits.SpiritService/GetSpirit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiritServiceClient) ListSpirits(ctx context.Context, in *ListSpiritsRequest, opts ...grpc.CallOption) (*ListSpiritsResponse, error) {
	out := new(ListSpiritsResponse)
	err := c.cc.Invoke(ctx, "/spirits.SpiritService/ListSpirits", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiritServiceClient) UpdateSpirit(ctx context.Context, in *UpdateSpiritRequest, opts ...grpc.CallOption) (*UpdateSpiritResponse, error) {
	out := new(UpdateSpiritResponse)
	err := c.cc.Invoke(ctx, "/spirits.SpiritService/UpdateSpirit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *spiritServiceClient) DeleteSpirit(ctx context.Context, in *DeleteSpiritRequest, opts ...grpc.CallOption) (*DeleteSpiritResponse, error) {
	out := new(DeleteSpiritResponse)
	err := c.cc.Invoke(ctx, "/spirits.SpiritService/DeleteSpirit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpiritServiceServer is the server API for SpiritService service.
// All implementations must embed UnimplementedSpiritServiceServer
// for forward compatibility
type SpiritServiceServer interface {
	CreateSpirit(context.Context, *CreateSpiritRequest) (*CreateSpiritResponse, error)
	GetSpirit(context.Context, *GetSpiritRequest) (*GetSpiritResponse, error)
	ListSpirits(context.Context, *ListSpiritsRequest) (*ListSpiritsResponse, error)
	UpdateSpirit(context.Context, *UpdateSpiritRequest) (*UpdateSpiritResponse, error)
	DeleteSpirit(context.Context, *DeleteSpiritRequest) (*DeleteSpiritResponse, error)
	mustEmbedUnimplementedSpiritServiceServer()
}

// UnimplementedSpiritServiceServer must be embedded to have forward compatible implementations.
type UnimplementedSpiritServiceServer struct {
}

func (UnimplementedSpiritServiceServer) CreateSpirit(context.Context, *CreateSpiritRequest) (*CreateSpiritResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSpirit not implemented")
}
func (UnimplementedSpiritServiceServer) GetSpirit(context.Context, *GetSpiritRequest) (*GetSpiritResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpirit not implemented")
}
func (UnimplementedSpiritServiceServer) ListSpirits(context.Context, *ListSpiritsRequest) (*ListSpiritsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListSpirits not implemented")
}
func (UnimplementedSpiritServiceServer) UpdateSpirit(context.Context, *UpdateSpiritRequest) (*UpdateSpiritResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSpirit not implemented")
}
func (UnimplementedSpiritServiceServer) DeleteSpirit(context.Context, *DeleteSpiritRequest) (*DeleteSpiritResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSpirit not implemented")
}
func (UnimplementedSpiritServiceServer) mustEmbedUnimplementedSpiritServiceServer() {}

// UnsafeSpiritServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpiritServiceServer will
// result in compilation errors.
type UnsafeSpiritServiceServer interface {
	mustEmbedUnimplementedSpiritServiceServer()
}

func RegisterSpiritServiceServer(s grpc.ServiceRegistrar, srv SpiritServiceServer) {
	s.RegisterService(&SpiritService_ServiceDesc, srv)
}

func _SpiritService_CreateSpirit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSpiritRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiritServiceServer).CreateSpirit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spirits.SpiritService/CreateSpirit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiritServiceServer).CreateSpirit(ctx, req.(*CreateSpiritRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiritService_GetSpirit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSpiritRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiritServiceServer).GetSpirit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spirits.SpiritService/GetSpirit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiritServiceServer).GetSpirit(ctx, req.(*GetSpiritRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiritService_ListSpirits_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListSpiritsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiritServiceServer).ListSpirits(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spirits.SpiritService/ListSpirits",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiritServiceServer).ListSpirits(ctx, req.(*ListSpiritsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiritService_UpdateSpirit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSpiritRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiritServiceServer).UpdateSpirit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spirits.SpiritService/UpdateSpirit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiritServiceServer).UpdateSpirit(ctx, req.(*UpdateSpiritRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpiritService_DeleteSpirit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteSpiritRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpiritServiceServer).DeleteSpirit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spirits.SpiritService/DeleteSpirit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpiritServiceServer).DeleteSpirit(ctx, req.(*DeleteSpiritRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpiritService_ServiceDesc is the grpc.ServiceDesc for SpiritService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpiritService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "spirits.SpiritService",
	HandlerType: (*SpiritServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSpirit",
			Handler:    _SpiritService_CreateSpirit_Handler,
		},
		{
			MethodName: "GetSpirit",
			Handler:    _SpiritService_GetSpirit_Handler,
		},
		{
			MethodName: "ListSpirits",
			Handler:    _SpiritService_ListSpirits_Handler,
		},
		{
			MethodName: "UpdateSpirit",
			Handler:    _SpiritService_UpdateSpirit_Handler,
		},
		{
			MethodName: "DeleteSpirit",
			Handler:    _SpiritService_DeleteSpirit_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "spirit.proto",
}
