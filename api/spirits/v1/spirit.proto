syntax = "proto3";

package spirits.v1;

import "spirits/v1/action.proto";
import "spirits/v1/meta.proto";
import "google/api/annotations.proto";
import "validate/validate.proto";

option go_package = "github.com/ankeesler/spirits;spiritsv1";

// SpiritService provides a simple CRUD API for Spirit's.
service SpiritService {
  rpc CreateSpirit(CreateSpiritRequest) returns (CreateSpiritResponse) {
    option (google.api.http) = {
      post: "/spirits/v1/spirits"
      body: "*"
    };
  }

  rpc GetSpirit(GetSpiritRequest) returns (GetSpiritResponse) {
    option (google.api.http) = {
      get: "/spirits/v1/{id=spirits/*}"
    };
  }

  rpc ListSpirits(ListSpiritsRequest) returns (ListSpiritsResponse) {
    option (google.api.http) = {
      get: "/spirits/v1/spirits"
    };
  }

  rpc UpdateSpirit(UpdateSpiritRequest) returns (UpdateSpiritResponse) {
    option (google.api.http) = {
      put: "/spirits/v1/{spirit.meta.id=spirits/*}"
      body: "*"
    };
  }

  rpc DeleteSpirit(DeleteSpiritRequest) returns (DeleteSpiritResponse) {
    option (google.api.http) = {
      delete: "/spirits/v1/{id=spirits/*}"
    };
  }
}

message CreateSpiritRequest {
  // The Spirit to create. The ID will be filled in on response.
  Spirit spirit = 1;
}

message CreateSpiritResponse {
  // The newly created Spirit.
  Spirit spirit = 1;
}

message GetSpiritRequest {
  // The id of the Spirit to get.
  string id = 1;
}

message GetSpiritResponse {
  // The retrieved Spirit.
  Spirit spirit = 1;
}

message ListSpiritsRequest {
  // An optional name to use as a filter.
  optional string name = 1;
}

message ListSpiritsResponse {
  repeated Spirit spirits = 1;
}

message UpdateSpiritRequest {
  // The new version of the Spirit.
  Spirit spirit = 1;
}

message UpdateSpiritResponse {
  // The newly updated Spirit.
  Spirit spirit = 1;
}

message DeleteSpiritRequest {
  // The id of the Spirit to delete.
  string id = 1;
}

message DeleteSpiritResponse {
  // The newly deleted Spirit.
  Spirit spirit = 1;
}

// Spirit describes a single actor in a Battle.
message Spirit {
  // Metadata about this Spirit.
  Meta meta = 1;

  // Name of this Spirit - colloquial name used to identify the Spirit.
  string name = 2 [(validate.rules).string.min_len = 1];

  // The quantitative description of this Spirit's abilities.
  SpiritStats stats = 3;

  // The SpiritAction's that this Spirit can take on their turn in a Battle.
  repeated SpiritAction actions = 4;
}

// SpiritStats are a quantitative description of a Spirit's abilities.
message SpiritStats {
  int64 health = 1;
  int64 physical_power = 2;
  int64 physical_constitution = 3;
  int64 mental_power = 4;
  int64 mental_constitution = 5;
  int64 agility = 6;
}

// SpiritAction is a reference to an Action that a Spirit can invoke during
// Battle.
message SpiritAction {
  // The name of this SpiritAction.
  string name = 1;

  oneof definition {
    // The ID of the Action.
    string action_id = 2;

    // An inline definition of the Action.
    Action inline = 3;
  }
}
